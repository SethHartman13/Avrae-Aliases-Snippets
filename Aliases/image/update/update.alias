embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """
    
    # Creates list to store matches
    results_keys = []

    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)


        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:

            results_keys.append(key)

        else:
            pass

    # If there are matche, return a list
    if len(results_keys) != 0:
        return results_keys

    # If there are no matches, return a string
    else:
        return "None"


def update_image(img_name: str, img_url: str) -> list[str]:
    """
    Function that handles updating the image requested.

    Args:
        img_name (str): Name of the image
        img_url (str): URL of the image

    Return:
        ['status', 'status message']
    """

    # Checks to see if the uvar exists
    if uvar_exists("imageLibrary"):

        # Grabs dictionary and then searches the dictionary for matches
        image_dict = load_json(get_uvar("imageLibrary"))
        key_result = search_key(img_name, image_dict.keys())

        # If it comes back with at least one match
        if key_result != "None":

            # If it comes with only one match
            if len(key_result) == 1:

                # Creates backup uvar incase user updates incorrect image
                set_uvar("imageLibraryBackup", dump_json(image_dict))

                # Sets image url to new image url
                image_dict[key_result_list[0]] = img_url

                # Sets uvar to new dictionary
                set_uvar("imageLibrary", dump_json(image_dict))
                return ["Success", f"{img_name} updated in your image library!"]

            # If it comes back with multiple matches
            else:
                key_result_list.insert(0, "**Multiple images found:**")
                return ["Error", "\n".join(key_result)]

        # If it comes back with no matches
        else:
            return ["Error", "Image not found!"]

    # If the uvar does not exist
    else:
        return ['Error', "Uvar `imageLibrary` does not exist!"]


def main(inputs: list[str]) -> list[str]:
    """
    Main program function

    Args:
        inputs (list[str]): List containing image name and url

    Return:
        ['title of embed', 'caption of embed', 'image url']
    """

    # Creates error list to catch errors
    error = []

    # If there are exactly two inputs 
    if len(inputs) == 2:

        # Stores image name and url
        img_name = inputs[0]
        img_url = inputs[1]

        # Checks to see if the url starts with http
        url_split = img_url.lower().split("http")

        # If it doesn't
        if url_split[0] != "":
            error.append("Invalid URL. The URL must start with https or http")

        # If it does
        else:
            results = update_image(img_name, img_url)

        # If it gets a status of success
        if results[0] == "Success":
            pass

        # If it gets an error status
        else:
            error.append(results[1])

    # If it does not get 2 arguments
    else:
        error.append("2 arguments expected!")

    # If there were no errors, constructs success output
    if len(error) == 0:
        title = "Image updated in your library"
        caption = img_name

    # If there were errors, constructs error output
    else:
        title = "An error has occurred!"
        caption = "\n".join(error)
        img_url = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/image/image.png" # Error image

    # Return output
    return [title, caption, img_url]


# Call main program and pull outputs
response_list = main(&ARGS&)

# Sore outputs for human readability
title = response_list[0]
caption = response_list[1]
img_url = response_list[2]


</drac2>
-title "{{title}}"
-image "{{img_url}}"
-f "{{caption}}"
-footer "!image update [image name] [image url] | Updated 6/22/23 | ShadowsStride"
embed
<drac2>
# *******************************************************
#  * Copyright (C) 2023 Seth Hartman - shadowsstride@gmail.com
#  * 
#  * This file is part of the User Image Library Manager.
#  * 
#  * User Image Library Manager can not be copied and/or distributed without the express
#  * permission of Seth Hartman
#  *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    results_keys = []
    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)


        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:

            results_keys.append(key)

        else:
            pass

    if len(results_keys) != 0:
        return results_keys

    else:
        return "None"


def get_image(img_name: str) -> list[str]:

    if uvar_exists("imageLibrary"):
        image_dict = load_json(get_uvar("imageLibrary"))
        key_result = search_key(img_name, image_dict.keys())

        if key_result != "None":
            if len(key_result) == 1:
                return ["Success", image_dict[key_result[0]]]

            else:
                key_result.insert(0, "**Multiple images found:**")
                return ["Error", "\n".join(key_result)]
        else:
            return ["Error", f"Image not found!"]

    else:
        return ['Error', "Uvar `imageLibrary` does not exist!"]


def main(inputs: list[str]) -> list[str]:
    error = []
    if len(inputs) >= 1:

        img_name = inputs[0]
        
        results = get_image(img_name)

        if results[0] == "Success":
            pass
        else:
            error.append(results[1])

    else:
        error.append("2 arguments expected!")

    if len(error) == 0:
        title = "Image:"
        caption = inputs[0]
        img_url = results[1]

    else:
        title = "An error has occurred!"
        caption = "\n".join(error)
        img_url = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/image/image.png"

    return [title, caption, img_url]

response_list = main(&ARGS&)

title = response_list[0]
caption = response_list[1]
img_url = response_list[2]
</drac2>

-title "{{title}}"
-image "{{img_url}}"
-f "{{caption}}"
-footer "!image update [image name] [image url] | Updated 6/18/23 | ShadowsStride"
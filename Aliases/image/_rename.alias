embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    key_results = []

    # Checks each item if a match occurs
    for key in key_list:

        # If matches
        if query.lower() in key.lower():
            key_results.append(key)

        else:
            pass

    # Finds at least 1 match
    if len(key_results) > 0:
        return key_results

    # If it finds no matches
    else:
        return 'None'


def edit_backup_remove_old(old_img_name: str, new_img_name: str, image_dict: dict, key_dict: str) -> list[str]:
    """
    Creates backup, renames entry, saves dictionary.
    
    Args:
        old_img_name (str): Original image name
        new_img_name (str): New image name
        image_dict (dict): Image dictionary
        key_dict: (str): Relevent dictionary key

    Return:
        (list[str]): Result
    """

    # Creates backup uvar incase user ranames incorrect image
    set_uvar("imageLibraryBackup", dump_json(image_dict))

    # Moves old entry into new entry
    image_dict[new_img_name] = image_dict[old_img_name]

    # Creates a new dictionary excluding the key:value that was requested to be renamed
    new_image_dict = {key: val for key, val in image_dict.items() if key.lower() != key_dict.lower()}

    # Sets uvar to new dictionary
    set_uvar("imageLibrary", dump_json(new_image_dict))

    return ["Success", image_dict[new_img_name]]


def rename_image(old_img_name: str, new_img_name) -> list[str]:
    """
    Function that handles renaming the image requested.

    Args:
        old_img_name (str): Current name of the image
        new_img_name (str): New name of the image

    Return:
        ['status', 'status message']
    """

    # Checks to see if the uvar exists
    image_test = get_uvar("imageLibrary", default="None")

    if image_test != "None":
        image_dict = load_json(image_test)

    else:
        return ['Error', "Uvar `imageLibrary` does not exist!"]

    key_result = search_key(old_img_name, image_dict.keys())

    # If it comes back with at least one match for old_img_name
    if key_result != "None":

        # If it comes with only one match for old_img_name
        if len(key_result) == 1:

            key_result2 = search_key(new_img_name, image_dict.keys())

            # If it comes back with at least one match for new_img_name
            if key_result2 != "None":

                # If it comes with only one match for new_img_name
                if len(key_result2) == 1:
                    if key_result2[0].lower() == new_img_name.lower():
                        return ["Error", "New image name is already taken"]

                    else:
                        return edit_backup_remove_old(old_img_name, new_img_name, image_dict, key_result[0])

                # If it finds multiple matches for new_img_name
                else:
                    for key in key_result2:
                        if key.lower() != new_img_name.lower():
                            pass

                        else:
                            return ["Error", "New image name is already taken"]

                    return edit_backup_remove_old(old_img_name, new_img_name, image_dict, key_result[0])

            # If it comes bcak with no matches for new_img_name
            else:
                return edit_backup_remove_old(old_img_name, new_img_name, image_dict, key_result[0])

        # If it comes back with multiple matches for old_img name
        else:
            for dict_key in key_result:
                if dict_key.lower() != old_img_name.lower():
                    pass

                else:
                    key_result2 = search_key(new_img_name, image_dict.keys())

                    # If it comes back with at least one match for new_img_name
                    if key_result2 != "None":

                        # If it comes with only one match for new_img_name
                        if len(key_result2) == 1:
                            if key_result2[0].lower() == new_img_name.lower():
                                return ["Error", "New image name is already taken"]

                            else:
                                return edit_backup_remove_old(old_img_name, new_img_name, image_dict, dict_key)

                        # If it finds multiple matches for new_img_name
                        else:
                            for key in key_result2:
                                if key.lower() != new_img_name.lower():
                                    pass

                                else:
                                    return ["Error", "New image name is already taken"]

                            return edit_backup_remove_old(old_img_name, new_img_name, image_dict, dict_key)

                    # If it comes bcak with no matches for new_img_name
                    else:
                        return edit_backup_remove_old(old_img_name, new_img_name, image_dict, dict_key)


            key_result.insert(0, "**Multiple images found:**")

            return ["Error", "\n".join(key_result)]

    # If it comes back with no matches
    else:
        return ["Error", "Image not found!"]


def main(input_list: list[str]) -> list[str]:
    """
    Main program function

    Args:
        input_list (list[str]): List containing old and new image name
    
    Return:
        ['title of embed', 'caption of embed', 'image url']
    """

    if len(input_list) > 1:
        result_list = rename_image(input_list[0], input_list[1])

    else:
        return [f"{ctx.author.display_name} has encountered an error", "Expected two arguments", "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/image/image.png"]

    if result_list[0] != "Error":
        return [f"{ctx.author.display_name}: Image successfully updated", input_list[1], result_list[1]]

    else:
        return [f"{ctx.author.display_name} has encountered an error", result_list[1], "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/image/image.png"]


# Call main program
response_list = main(&ARGS&)


</drac2>
-title "{{response_list[0]}}"
-f "{{response_list[1]}}"
-image "{{response_list[2]}}"
-footer "!image rename [old image name] [new image name]{{"\n"}}Updated 7/8/23 | ShadowsStride"
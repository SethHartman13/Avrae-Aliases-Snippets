embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|None:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (list[str]|None): If it finds it, it returns the key, otherwise it returns None
    """

    # Creates list to store matches
    key_results = []

    # Checks each item if a match occurs
    for key in key_list:

        # If matches
        if query.lower() in key.lower():
            key_results.append(key)

        else:
            pass

    # Finds at least 1 match
    if len(key_results) > 0:
        return key_results

    # If it finds no matches
    else:
        return None


def capitalize_name(name: str) -> str:
    """
    Capitalizes name.
    
    Args:
        name: Name to capitalize.

    Return:
        (str): Capitalized name
    """

    # For multi-word names
    name_list_temp = name.split(" ")
    name_list = []

    # Each word gets lowercased and first letter capitalized
    for temp_name in name_list_temp:
        name_list.append(temp_name.lower().capitalize())

    return " ".join(name_list)

def guide_variable_find(guide_value: any) -> dict|list|str:
    """
    Tries to find variable contents (uvar -> svar -> gvar)

    Args:
        guide_value (any): Value of a guide (likely string, but can potentially be anything)


    Return:
        (dict|list|str): New value of the guide
    """

    # Searches for uvar
    uvar = get_uvar(str(guide_value), default=None)

    # If uvar exists, return uvar value
    if uvar:
        return load_json(uvar)

    # If uvar does not exist, search for svar
    else:
        svar = get_svar(str(guide_value), default=None)

        # If svar exists, return svar value
        if svar:
            return load_json(svar)

        # If svar does not exist, search for gvar
        else:
            gvar = get_gvar(str(guide_value))

            # If gvar exists, return gvar value
            if gvar:
                return load_json(gvar)

            # If gvar does not exist, return existing value
            else:
                return str(guide_value)


def parse_output_string(list_of_lists: list[list[str]], list_num: int, max_char: int = 250) -> str:
    """
    Dynamically splits up content from request.

    Args:
        list_of_lists (list[list[str]]): List of collections of data to be strung together
        list_num (int): Collection # requested
        max_char (int): Maximum characters per output (Default 300 characters)
    
    Return:
        (str): Result
    """

    # Setup test_list with empty collection
    test_list = [[]]

    # Select first collection to place information
    i = 0

    # For each list of information
    for item_list in list_of_lists:

        # Add data within list to collection in item_list
        test_list[i].append("\n".join(item_list))

        # If data in current collection is larger than max_char 
        if len("\n".join(test_list[i])) > max_char:

            # Move on to new collection
            test_list.append([])
            i += 1

        # If data in current collection is not larger than max_char
        else:

            # Stay on current collection
            pass

    # If there is no empty output
    if test_list[-1] not in [[''], ['\n'], []]:
        pass

    # If there is an empty output
    else:
        test_list.pop(-1)

    # If it is within bounds
    if len(test_list) >= list_num and list_num >= 1:
        pass

    # If it is not within bounds
    else:

        # If it is above bounds
        if list_num > len(test_list):
            list_num = len(test_list)

        # If it is below bounds
        else:
            list_num = 1

    # If list_num is below upper bound
    if list_num <= len(test_list):

        # if list_num is above lower bound
        if list_num >= 1:
            pass

        # If list_num is below lower bound
        else:
            list_num = 1

    # If list_num is above upper bound
    else:
        list_num = len(test_list)
        
    # If there is only one collection that exists
    if len(test_list) == 1:
        list_str = ""

    # If there is more than one collection that exists
    else:
        list_str = f"{list_num}/{len(test_list)}"

    # Return requested collection of data
    return f"{list_str}\n" + "\n".join(test_list[list_num - 1])
        

def grab_general(general_dictionary: dict, list_num: int) -> str:
    """
    Grabs guides and their contents. Displays guides, guide paragraphs, and section names. Groups by guide.

    Args:
        general_dictionary (dict): General dictionary containing guides
        list_num (int): Collection # requested

    Return:
        (str): Result
    """

    # Create list and select first list to start
    result_list = []
    i = 0

    # For each key and value within the general_dictionary
    for guide_key, guide_value in general_dictionary.items():

        # Create new list with guide name as first entry
        result_list.append([f"**{capitalize_name(guide_key)}**"])

        # If the value is a dictionary
        if typeof(guide_value) == "SafeDict":

            # For each section within that guide add a section name
            for section_key in guide_value.keys():
                result_list[i].append(capitalize_name(section_key))

        # If the value is a list
        elif typeof(guide_value) == "SafeList":

            # For each paragraph within that guide, add paragraph
            for paragraph in guide_value:
                result_list[i].append(str(paragraph))
                result_list[i].append("")

        # If the value is not a dictionary or list, add paragraph
        else:
            result_list[i].append(str(guide_value))

        result_list[i].append("")

        # Go onto next list
        i += 1

    # Sends [[guide_key1, guide_value1, guide_value2], [guide_key2, guide_value1, guide_value2]] to parse_output_string()
    return parse_output_string(result_list, list_num)


def grab_guide(guide_value: dict|list|str, list_num: int) -> str:
    """
    Grabs contents of guide, section name, section value, subsection name, and subsection value. Groups by section/paragraph

    Args:
        guide_value (dict|list|str): Value of guide requested
        list_num (int): Collection # requested

    Return:
        (str): Result
    """

    # Create list and select first collection to start
    result_list = []
    i = 0

    # If the guide_value is a dictionary
    if typeof(guide_value) == "SafeDict":

        # For each key and value within the guide_value
        for section_key, section_value in guide_value.items():

            # Create a new list with section name as first entry
            result_list.append([f"**{capitalize_name(section_key)}**"])

            # If the section_value is a dictionary
            if typeof(section_value) == "SafeDict":

                # For each key and value within the section_value
                for subsection_key, subsection_value in section_value.items():

                    # Add subsection name
                    result_list[i].append(capitalize_name(subsection_key))

                    # If the subsection_value is a list:
                    if typeof(subsection_value) == "SafeList":

                        # For each paragraph in list, add paragraph
                        for paragraph in subsection_value:
                            result_list[i].append(f"- *{str(paragraph)}*")
                            #result_list[i].append("")

                    # If the subsection_value is a dictionary, add error
                    elif typeof(subsection_value) == "SafeDict":
                        result_list[i].append("*Error: Subsection value cannot be a dictionary*")


                    # If the subsection_value is not a dictionary or list, add paragraph
                    else:
                        result_list[i].append(f"- *{str(subsection_value)}*")

            # If the section_value is a list
            elif typeof(section_value) == "SafeList":

                # For each paragraph in list, add paragraph
                for paragraph in section_value:
                    result_list[i].append(str(paragraph))

                    if len(section_value) - 1 != section_value.index(paragraph):
                        result_list[i].append("")

                    else:
                        pass

            # If the section_value is not a dictionary or list, add paragraph
            else:

                result_list[i].append(str(section_value))

            result_list.append([""])

            # Go onto next collection
            i += 2

    # If the guide_value is a list
    elif typeof(guide_value) == "SafeList":

        # For each paragraph, add paragraph to each new collection
        for paragraph in guide_value:
            result_list.append([str(paragraph), "\n"])

    # If the guide_value is not a dictionary or list, add paragraph to single collection
    else:
        result_list.append([str(guide_value)])

    # Sends [[section_key1, section_value1, section_value2], [guide_paragraph1, guide_paragraph2], [guide_paragraph]] to parse_output_string()
    return parse_output_string(result_list, list_num)


def grab_section(section_value: list|dict|str, list_num: int) -> str:
    """
    Grabs contents of section value, subsection name, and subsection value. Groups by subsection/paragraph

    Args:
        section_value (dict|list|str): Value of section requested
        list_num (int): Collection # requested

    Return:
        (str): Result
    """

    # Create collection within list and select first collection to start
    result_list = []
    i = 0

    # If section_value is a dictionary
    if typeof(section_value) == "SafeDict":

        # For each key and value within the section_value
        for subsection_key, subsection_value in section_value.items():
            
            # Add subsection name
            result_list.append([f"**{subsection_key}**"])

            # If the subsection_value is a list:
            if typeof(subsection_value) == "SafeList":

                # For each paragraph in list, add paragraph
                for paragraph in subsection_value:
                    result_list[i].append(f"{str(paragraph)}")
                    result_list[i].append("")

            # If the subsection_value is a dictionary, add error
            elif typeof(subsection_value) == "SafeDict":
                result_list[i].append("Error: Subsection value cannot be a dictionary")
                
            # If the subsection_value is not a dictionary or list, add paragraph
            else:
                result_list[i].append(f"{str(subsection_value)}")

            # Go onto next collection
            i += 1

    # If the section_value is a dictionary
    elif typeof(section_value) == "SafeList":

        # For each paragraph in list, add paragraph
        for paragraph in section_value:
            result_list.append([f"{str(paragraph)}"])
            result_list[-1].append("")

            # Go onto next collection
            i += 1

    # If the section_value is not a dictionary or list, add paragraph:
    else:
        result_list.append([str(section_value)])
        result_list[-1].append("")

        # Go onto next collection
        i += 1

    # Sends [[subsection_key 1, subsection_value1, subsection_value2], [subsection_value1, subsection_value2], [subsection_value]] to parse_output_string()
    return parse_output_string(result_list, list_num)

    
def grab_subsection(subsection_value: list|str, list_num: int) -> str:
    """
    Grabs contents of subsection. Groups by paragraph

    Args:
        subsection_value (dict|list|str): Value of subsection requested
        list_num (int): Collection # requested

    Return:
        (str): Result
    """

    # Groups by paragraph

    # Create collection within list and select first collection to start
    result_list = []
    i = 0

    # If the subsection_value is a list
    if typeof(subsection_value) == "SafeList":

        # For each paragraph in the list, add paragraph within a collection
        for paragraph in subsection_value:
            result_list.append([str(paragraph)])
            result_list.append("")

    # If somehow the subsection_value is a dictionary, add error within a collection
    elif typeof(subsection_value) == "SafeDict":
        result_list.append(["Error: Subsection value cannot be a dictionary"])
        result_list.append("")

    # If the subsection_value is not a dictionary or list, add paragraph within collection:
    else:
        result_list.append([str(subsection_value)])
        result_list.append("")

    # Sends [[subsection_value1, subsection_value2], [subsection_value]] to parse_output_string()
    return parse_output_string(result_list, list_num)


def main(input_list: list[str]) -> list[str]:
    """
    Main program function

    Args:
        input_list (list[str]): List of inputs

    Return:
        (list[str]): Result
    """
    
    error_img = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/guide/images/fail.png"
    general_img = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/guide/images/general.png"
    guide_img = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/guide/images/guide.png"
    section_img = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/guide/images/section.png"
    subsection_img = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/guide/images/subsection.png"

    # Tries to grab a uvar and svar
    guide_uvar = get_uvar("guide_dict", default=None)
    guide_svar = get_svar("guide_dict", default=None)

    # If there is a uvar
    if guide_uvar:
        guide_uvar_dict = load_json(guide_uvar)

    # If there is not a uvar
    else:
        pass

    # If there is a svar
    if guide_svar:
        guide_svar_dict = load_json(guide_svar)

    # If there is a uvar
    else:
        pass

    # If there was at least one of uvar/svar
    if guide_svar or guide_uvar:
        pass

    # If thre was not at least one of uvar/svar
    else:
        return [f'{ctx.author.display_name} has encountered an error', "guide_dict was not found", error_img, "#CC0202"]

    # If there is a uvar, but no svar
    if not guide_svar and guide_uvar:
        general_dictionary = {key:value for (key, value) in guide_uvar_dict.items()}

    # If there is a svar
    else:
        general_dictionary = {key:value for (key, value) in guide_svar_dict.items()}

        # If there is not a uvar
        if not guide_uvar:
            pass

        # If there is a uvar
        else:
            for key in guide_uvar_dict.keys():
                general_dictionary[key] = guide_uvar_dict[key]

    # If the dictionary is not empty
    if len(general_dictionary.keys()) > 0:
        pass

    # If the dictionary is empty
    else:
        return [f"{ctx.author.display_name} looks up available guides", "None", general_img, ""]

    # For key, value in general_dictionary
    for guide_key, guide_value in general_dictionary.items():

        # If guide_value is a dictionary, do nothing
        if typeof(guide_value) == "SafeDict":
            pass

        # If guide_value is a list
        elif typeof(guide_value) == "SafeList":
            i = 0

            # For each item in guide_value, check variables
            for item in guide_value:
                general_dictionary[guide_key][i] = guide_variable_find(item)
                i += 1


        # If the guide_value is not a dictionary or list, check variables
        else:
            general_dictionary[guide_key] = guide_variable_find(guide_value)

    # If there is any inputs
    if len(input_list) > 0:

        # Try to make the last input an integer
        try:
            list_num = int(input_list[-1])
            input_list.pop(-1)

        # Last input is not a number
        except:
            list_num = 1

    # If there are no inputs 
    else:
        list_num = 1

    # Create capitalize_input_list
    capitalize_input_list = []
            
    # General
    # ==========================================================================================

    # If there were no inputs, return list of guides and their section names 
    if len(input_list) == 0:
        return [f"{ctx.author.display_name} looks up available guides", grab_general(general_dictionary, list_num), general_img, ""]

    # If there was at least one input, search guide key
    else:
        result_key = search_key(input_list[0], general_dictionary.keys())

    # If there was at least one match
    if result_key:

        # If there was exactly one match, change input to result_key, add capitalized version to capitalize_input_list
        if len(result_key) == 1:
            input_list[0] = result_key[0]
            capitalize_input_list.append(capitalize_name(input_list[0]))

        # If there were multiple matches 
        else:

            # Searches for potential match
            for potential_match in result_key:

                # If it is not an exact match
                if input_list[0].lower() != potential_match.lower():
                    pass

                # If it is not an exact match
                else:
                    input_list[0] = result_key[0]
                    capitalize_input_list.append(capitalize_name(input_list[0]))

            # If there was a match made
            if len(capitalize_input_list) == 1:
                pass

            # If there was not a match made: Return list of guides and their section names (with error message)
            else:
                return [f"{ctx.author.display_name} looks up available guides", "\n".join(["(Error: Multiple Matching Guides)", grab_general(general_dictionary, list_num)]), general_img, "#CC0202"]


    # If there were no inputs, return list of guides and their section names (with error message)
    else:
        return [f"{ctx.author.display_name} looks up available guides", "\n".join(["(Error: Guide Not Found)", grab_general(general_dictionary, list_num)]), general_img, "#CC0202"]

    # Guide
    # ==========================================================================================

    # If there was only one input, return list of sections, their values, subsection names, and subsection values
    if len(input_list) == 1:
        return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]}", grab_guide(general_dictionary[input_list[0]], list_num), guide_img, ""]

    # If there were more than one input
    else:
        
        # If guide_value is a dictionary, search section key
        if typeof(general_dictionary[input_list[0]]) == "SafeDict":
            result_key = search_key(input_list[1], general_dictionary[input_list[0]].keys())

        # If guide_value is not a dictionary, return list of sections, their values, subsection names, and subsection values (with error message)
        else:
            return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]}", "\n".join(["(Error: Guide has no sections)", grab_guide(general_dictionary[input_list[0]], list_num)]), guide_img, "#CC0202"]

    # If there was at least one match
    if result_key:

        # If there was exactly one match, change input to result_key, add capitalized version to capitalize_input_list
        if len(result_key) == 1:
            input_list[1] = result_key[0]
            capitalize_input_list.append(capitalize_name(input_list[1]))

        # If there multiple matches
        else:

            # Searches for potential match
            for potential_match in result_key:

                # If it is not an exact match
                if input_list[1].lower() != potential_match.lower():
                    pass

                # If it is an exact match
                else:
                    input_list[1] = result_key[0]
                    capitalize_input_list.append(capitalize_name(input_list[1]))

            # If there was a match made
            if len(capitalize_input_list) == 2:
                pass

            # If there was not a match made: Return list of sections, their values, subsection names, and subsection values (with error message)
            else:
                return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]}", "\n".join(["(Error: Multiple Matching Sections)", grab_guide(general_dictionary[input_list[0]], list_num)]), guide_img, "#CC0202"]

    # If there were no matches, return list of sections, their values, subsection names, and subsection values (with error message)
    else:
        return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]}", "\n".join(["(Error: Section Not Found)", grab_guide(general_dictionary[input_list[0]], list_num)]), guide_img, "#CC0202"]

    # Section
    # ==========================================================================================

    # If there were only two inputs, return section values, subsection names, and subsection values
    if len(input_list) == 2:
        return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]} > {capitalize_input_list[1]}", grab_section(general_dictionary[input_list[0]][input_list[1]], list_num), section_img, ""]

    # If there were more than two inputs
    else:

        # If section_value is a dictionary, search subsection key
        if typeof(general_dictionary[input_list[0]][input_list[1]]) == "SafeDict":
            result_key = search_key(input_list[2], general_dictionary[input_list[0]][input_list[1]].keys())

        # If section_value is not a dictionary, return section values, subsection names, and subsection values (with error message)
        else:
            return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]} > {capitalize_input_list[1]}", "\n".join(["(Error: Section Has No Subsections)", grab_section(general_dictionary[input_list[0]][input_list[1]], list_num)]), section_img, "#CC0202"]

    # If there was at least one match
    if result_key:

        # If there was exactly one match, change input to result_key, add capitalized version to capitalize_input_list
        if len(result_key) == 1:
            input_list[2] = result_key[0]
            capitalize_input_list.append(capitalize_name(input_list[2]))

        # If there were multiple matches
        else:

            # Searches for potential match
            for potential_match in result_key:

                # If it is not an exact match
                if input_list[2].lower() != potential_match.lower():
                    pass

                # If it is an exact match
                else:
                    input_list[2] = result_key[0]
                    capitalize_input_list.append(capitalize_name(input_list[2]))

            # If there was a match made
            if len(capitalize_input_list) == 3:
                pass

            # If there was not a match made: Return section values, subsection names, and subsection values (with error message)
            else:
                return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]} > {capitalize_input_list[1]}", "\n".join(["(Error: Multiple Matching Subsections)", grab_section(general_dictionary[input_list[0]][input_list[1]], list_num)]), section_img, "#CC0202"]

    # If there were no matches, return section values, subsection names, and subsection values (with error message)
    else:
        return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]} > {capitalize_input_list[1]}", "\n".join(["(Error: Subsection Not Found)", grab_section(general_dictionary[input_list[0]][input_list[1]], list_num)]), section_img, "#CC0202"]

    # Subsection
    # ==========================================================================================
    return [f"{ctx.author.display_name} looks up {capitalize_input_list[0]} > {capitalize_input_list[1]} > {capitalize_input_list[2]}", grab_subsection(general_dictionary[input_list[0]][input_list[1]][input_list[2]], list_num), subsection_img, ""]


# Main program function        
output_list = main(&ARGS&)
l = "<"


</drac2>
-title "{{output_list[0]}}"
-f "{{output_list[1]}}"
-thumb "{{output_list[2]}}"
-color "{{output_list[3]}}"
-footer "!guide {{l}}guide_name> {{l}}section_name> {{l}}subsection_name> {{l}}#> | 9/7/2023 | ShadowsStride"
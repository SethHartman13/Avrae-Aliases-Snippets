embed
<drac2>
# *******************************************************
# * This work includes material taken from the System Reference Document 5.1 
# * (“SRD 5.1”) by Wizards of the Coast LLC and available at https://dnd.wizards.com/resources/systems-reference-document. 
# * The SRD 5.1 is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# * 
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    key_results = []

    # Checks each item if a match occurs
    for key in key_list:

        # If matches
        if query.lower() in key.lower():
            key_results.append(key)

        else:
            pass

    # Finds at least 1 match
    if len(key_results) > 0:
        return key_results

    # If it finds no matches
    else:
        return 'None'

def find_player(player_search: str) -> list[str]:
    """
    Function that tries to find a player within the crime_dict.

    Args:
        player_search (str): Name of the player

    Return:
        (list[str]): Result
    """

    # Pulls and checks if svar exists
    full_test = get_svar("crime_dict", default="None")

    # If the svar exists
    if full_test != "None":
        full_dict = load_json(full_test)

    # If the svar does not exist
    else:
        return [f"{ctx.author.display_name} has encountered an error", "Svar `crime_dict` does not exist"]

    # Checks to see if the player is in the svar
    key_result = search_key(player_search, full_dict.keys())

    # If it finds at least one key
    if key_result != "None":

        # If it only finds one
        if len(key_result) == 1:

            # Returns player dictionary
            return ["Success", full_dict[key_result[0]]]

        # If it finds multiple keys
        else:
            for key in key_result:
                if name.lower() == key.lower():
                    return ['Success', full_dict[key]]

                else:
                    pass

            key_result.insert(0, "**Multiple players found:**")

            return ["Error", "\n".join(key_result)]

    # If it does not find a key
    else:
        return ["Error", "Player not found"]


def find_character_crimes(character_name: str, player_dict: dict) -> list[str]:
    """
    Function that pulls a character's crimes (if any).

    Args:
        character_name (str): Name of the character
        player_dict (dict): Dictionary of the player

    Return:
        (list[str]): Result    
    """

    key_result = search_key(character_name, player_dict.keys())

    # If it finds at least one key
    if key_result != "None":

        # If it finds only one
        if len(key_result) == 1:

            result_list = []

            # Header
            result_list.append(f"**{key_result[0]}'s Crimes:**")
            result_list.append("")

            # Lists each crime and cost associated with it
            for crime_cost in player_dict[key_result[0]]:
                result_list.append(f"**{crime_cost[0]}:** {crime_cost[1]} gp")

            return ['Success', "\n".join(result_list)]

        # If it finds multiple keys
        else:
            for key in key_result:
                if name.lower() == key.lower():
                    result_list = []

                    # Header
                    result_list.append(f"**{key}'s Crimes:**")
                    result_list.append("")

                    # Lists each crime and cost associated with it
                    for crime_cost in player_dict[key]:
                        result_list.append(f"**{crime_cost[0]}:** {crime_cost[1]} gp")

                    result_string = "\n".join(result_list)

                    return ['Success', result_string]

                else:
                    pass

                key_result.insert(0, "**Multiple characters found:**")

                return ["Error", "\n".join(key_result)]

    else:
        return ["Error", "Character not found"]


def main(input_list: list[str]) -> list:
    """
    Main program function

    Args:
        input_list (list[str]): List of inputs

    Return:
        (list): Results

    """

    # If the length of inputs is at least 2
    if len(input_list) >= 2:
        result_list = find_player(input_list[0])

    # If length was not met
    else:
        return [f"{ctx.author.display_name} has encountered an error", "Expected 2 arguments"]

    # If there was no error
    if result_list[0] != "Error":
        result_list2 = find_character_crimes(input_list[1], result_list[1])

    # If there was an error
    else:
        return [f"{ctx.author.display_name} has encountered an error", result_list[1]]

    # If there was no error
    if result_list2[0] != "Error":
        return [f"{ctx.author.display_name} Checks the Court Records", result_list2[1]]

    # If there was an error
    else:
        return [f"{ctx.author.display_name} has encountered an error", result_list2[1]]
    

# Grabs input
result_list = main(&ARGS&)


</drac2>
-title "{{result_list[0]}}"
-f "{{result_list[1]}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/ce0f79ad19956141a48567cfae15cfc4bd8ace26/Aliases/crime/image.png"
-footer "!crime [player name] [character name] | Updated 7/4/23 | ShadowsStride"
embed
<drac2>
# *******************************************************
# * This work includes material taken from the System Reference Document 5.1 
# * (“SRD 5.1”) by Wizards of the Coast LLC and available at https://dnd.wizards.com/resources/systems-reference-document. 
# * The SRD 5.1 is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# * 
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list:list) -> str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)

        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:
            return key

        else:
            pass

    # If none of the queries return a match with the keys
    return "None"


def main(player_query: str, character_query: str) -> list:
    """
    Main program function

    Args:
        player_query (str): Name of player
        character_query (str): Name of character

    Return:
        (list): Results

    """
    error = []

    # If the player name is not empty
    if player_query != "Error":
        try:
            # Grab the crime dict and player names
            full_dict = load_json(get_svar("crime_dict"))
            player_list = full_dict.keys()

        except:
            error.append("Problems loading crime dictionary")

        if len(error) == 0:

            # Grabs player key that matches
            player_key = search_key(player_query, player_list)

            # "None" if it doesn't find it.
            if player_key != "None":
                pass
            else:
                error.append(f"Player not found!")

        else:
            pass

    # If 2 arguments were not found
    else:
        error.append("2 arguments were expected")

    # If there are no errors
    if len(error) == 0:

        # Grabs character names under the player
        character_list = full_dict[player_key].keys()

        # Grabs player key that matches
        character_key = search_key(character_query, character_list)

        # "None" if it doesn't find it.
        if character_key != "None":
            pass
        else:
            error.append(f"Character not found for {player_query}")

    else:
        pass

    # If there are no errors
    if len(error) == 0:

        # Creates list for the response
        response_list = []
        response_list.append("**Crimes:**")

        # Pulls crime and cost 
        for crime_cost in full_dict[player_key][character_key]:
            response_list.append(f"**{crime_cost[0]}:** {crime_cost[1]} gp")

        # Creates string response and title
        response_string = "\n".join(response_list)
        title = f"Criminal Record for {character_key}"

    else:
        # If there were errors, displays error
        response_string = "\n".join(error)
        title = "Court Record Error!"
    
    return [response_string, title]

# Grabs input
input_list = &ARGS&

# Verifies that it gets two inputs
try:
    player_query = input_list[0]
    character_query = input_list[1]
except:
    player_query = "Error"
    character_query = "Error"

# Main function all
result_list = main(player_query, character_query)

# Extracts outputs
result_string = result_list[0]
title = result_list[1]

</drac2>
-title "{{title}}"
-f "{{result_string}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/ce0f79ad19956141a48567cfae15cfc4bd8ace26/Aliases/crime/image.png"
-footer "!crime [player name] [character name] | Updated 6/22/23 | ShadowsStride"
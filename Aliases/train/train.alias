embed
<drac2>


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    key_result = []

    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)


        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:

            key_result.append(key)

        else:
            pass

    # If there are matches, return a list
    if len(key_result) != 0:
        return key_result

    # If there are no matches, return a string
    else:
        return "None"


def grab_tool_weapon_lang_skill() -> dict:

    full_dict = dict()
    list_dicts = []


    # Thank you genesisest for putting these dictionaries together
    tool_test = get_svar('tool_dict', default="None")
    if tool_test != 'None':
        list_dicts.append(load_json(tool_test))

    else:
        list_dicts.append(load_json(get_gvar('33d14ee1-3951-449e-86df-9630b1f75173')))

    lang_test = get_svar('lang_dict', default="None")
    if lang_test != 'None':
        list_dicts.append(load_json(lang_test))
    
    else:
        list_dicts.append(load_json(get_gvar('70de35e5-aab5-4896-8f00-10bd85af732d')))

    weapon_test = get_svar('weapon_dict', default="None")
    if weapon_test != 'None':
        list_dicts.append(load_json(weapon_test))

    else:
        list_dicts.append(load_json(get_gvar('7b5154d2-85bf-4581-91e9-46295c5581e6')))

    instrument_test = get_svar('instrument_dict', default="None")
    if instrument_test != 'None':
        list_dicts.append(load_json(instrument_test))

    else:
        list_dicts.append(load_json(get_gvar('1c11be1f-d1c0-46b1-80cb-5a1ae5efafc8')))

    game_test = get_svar('gaming_dict', default="None")
    if game_test != 'None':
        list_dicts.append(load_json(game_test))

    else:
        list_dicts.append(load_json(get_gvar('1ff63486-fd0e-44fd-aa20-72165a92a840')))

    # skill_test = get_svar('skill_dict', default="None")
    # if skill_test != 'None':
    #   list_dicts.append(load_json(skill_test))
    # else:
    #   list_dicts.append(load_json(get_gvar('49fa8417-b31c-4c8f-bb4c-69bdcf6fcc92')))

    for dictionary in list_dicts:
        for key in dictionary.keys():
            full_dict[key] = dictionary[key]

    return full_dict


def find_highest_stat(stat_list: list, ch = character()) -> int:
    mod = -10

    for stat in stat_list:
        if stat == "str":
            if strengthMod > mod:
                mod = strengthMod

            else:
                pass

        elif stat == "dex":
            if dexterityMod > mod:
                mod = dexterityMod

            else:
                pass

        elif stat == "con":
            if constitutionMod > mod:
                mod = constitutionMod

            else:
                pass

        elif stat == "int":
            if intelligenceMod > mod:
                mod = intelligenceMod

            else:
                pass
        
        elif stat == "wis":
            if wisdomMod > mod:
                mod = wisdomMod

            else:
                pass

        else:
            subclass_test = ch.get_cvar("subclass", default="None")

            if "Fey Wanderer" in subclass_test:
                if charismaMod + wisdomMod > mod:
                    mod = charismaMod + wisdomMod

                else:
                    pass

            else:
                if charismaMod > mod:
                     mod = charismaMod

                else:
                    pass             

    return mod


def setup_training_cc(target: str, ch = character()) -> list[str]:

    if ch.cc_exists("Training"):
        return ['Error', 'There is already a tracker in progress, please run `!train clear` in order to make a new one']

    else:
        full_dict = grab_tool_weapon_lang_skill()
        key_result = search_key(target, full_dict.keys())

        if key_result != "None":
            if len(key_result) == 1:
                target = key_result[0]

            else:
                for dict_key in key_result:
                    if name.lower() == dict_key.lower():
                        
                        target = dict_key
                        
                    else:
                        pass
                
                key_result.insert(0, "**Multiple results found:**")
                return ["Error", "\n".join(key_result)]

        else:
            return ['Error', 'Proficiency not found!']

    
    settings_test = get_svar('training_settings', default="None")

    if settings_test != "None":
        settings_dict = load_json(settings_test)

        try:
            max_ = settings_dict['max_val']
        
        except:
            max_ = 10

        try:
            dispType = settings_dict['disp_type']

        except:
            dispType = 'star'
    
    else:
        max_ = 10
        dispType = 'star'

    desc_dict = {"time": 0, "prof": target}

    ch.create_cc(name="Training", minVal="0", maxVal=str(max_ - find_highest_stat(full_dict[target])), reset=None, dispType=dispType, reset_to="0", title=f"{name}'s training ({target})", desc=dump_json(desc_dict), initial_value=0)

    return ['Success']


def run_training_session(ch = character(), adv: int = 0, bonus: str = "None", ignore_time: bool = False) -> list[str]:
    settings_test = get_svar('training_settings', default="None")

    if settings_test != "None":
        settings_dict = load_json(settings_test)

        try:
            max_ = settings_dict['max_val']
        
        except:
            max_ = 10

        try:
            dispType = settings_dict['disp_type']

        except:
            disp_type = 'star'

        try:
            jack_of_trades = settings_dict['jack_of_trades']
        
        except:
            jack_of_trades = 1

        try:
            time_cooldown = settings_dict['time_cooldown']

        except:
            time_cooldown = 561600


        int_key_list = []

        for key in settings_dict:
            try:
                int(key)
                int_key_list.append(key)

            except:
                pass

        if len(int_key_list) > 0:
            threshold_values = {key: val for key, val in settings_dict.items() if key in int_key_list}

            try:
                threshold_values['-999']
            
            except:
                threshold_values['-999'] = 0

        else:
            threshold_values = {"-999": 0, "10": 1, "20": 2}

    else:
        max_ = 10
        disp_type = 'star'
        jack_of_trades = 1
        time_cooldown = 561600
        threshold_values = {"-999": 0, "10": 1, "20": 2}

    full_dict = grab_tool_weapon_lang_skill()
    desc_dict = load_json(ch.cc("Training").desc)
    time_last = desc_dict['time']
    current_time = int(round(time(), 0))
    ability_mod = find_highest_stat(full_dict[desc_dict['prof']])

    if (current_time >= time_last + time_cooldown) or ignore_time:
        if adv == 0:
            dice = "1d20"
        
        elif adv == 1:
            dice = "2d20kh1"

        else:
            dice = "2d20kl1"

        for (player_cls, level) in ch.levels:
            if player_cls == "Bard" and level >= 2 and jack_of_trades == 1:
                if bonus == "None":
                    bonus = floor(proficiencyBonus / 2)

                else:
                    bonus = f"{bonus} + {floor(proficiencyBonus / 2)}"

            else:
                pass

        if bonus == "None":
            roll_check = vroll(f"{dice} + {ability_mod}")

        else:
            roll_check = vroll(f"{dice} + {bonus} + {ability_mod}")

        for key in threshold_values.keys():
            if roll_check.result.total >= int(key):
                mod_num = threshold_values[key]

            else:
                pass

        ch.cc("Training").mod(mod_num)

        if not ignore_time:
            desc_dict['time'] = current_time
            desc_dict['bypass'] = False

        else:
            desc_dict['bypass'] = True

        ch.edit_cc("Training", minVal="0", maxVal=str(max_ - ability_mod), desc=dump_json(desc_dict))
    
        return ['Success', roll_check, mod_num]

    else:
        return ['Error', f'You have until <t:{time_last + time_cooldown}:f> before you can train again']


def main(input_list: list[str] = [], ch=character()):

    if len(input_list) != 0:

        if input_list[0].lower() not in ['-b', '-i', 'adv', 'dis']:
            train_target = input_list.pop(0)
            
            args = argparse(" ".join(input_list))
            adv = args.adv()
            bonus = args.last("b", default="None")
            ignore_time = args.last('i', default=False)

            results = setup_training_cc(train_target)

            if results[0] != 'Error':
                pass
            
            else:
                return [f'{ctx.author.display_name} has encountered an error', results[1]]

        else:
            args = argparse(" ".join(input_list))
            adv = args.adv()
            bonus = args.last("b", default="None")
            ignore_time = args.last('i', default=False)

            try:
                ch.cc("Training")
            
            except:
                return [f'{ctx.author.display_name} has encountered an error', 'Training CC does not exist. Please run `!train [name]`']

            
        results = run_training_session(adv=adv, bonus=bonus, ignore_time=ignore_time)

    else:
        try:
            ch.cc("Training")
        except:
            return [f'{ctx.author.display_name} has encountered an error', 'Training CC does not exist. Please run `!train [name]`']


        results = run_training_session()

    if results[0] != "Error":

        settings_test = get_svar('training_settings', default="None")

        if settings_test != "None":
            settings_dict = load_json(settings_test)

            try:
                time_cooldown = settings_dict['time_cooldown']

            except:
                time_cooldown = 561600
        
        else:
            time_cooldown = 561600


        desc_dict = load_json(ch.cc('Training').desc)

        prof_name = desc_dict['prof']

        prof_name_list_temp = prof_name.split(" ")
        prof_name_list = []


        for prof_name in prof_name_list_temp:
            prof_name_list.append(prof_name.capitalize())

        prof_name = " ".join(prof_name_list)

        result_string = [f"{str(results[1])}"]
        result_string.append(ch.cc_str('Training'))
        result_string.append(f"{ch.cc('Training').value}/{ch.cc('Training').max}  (+{results[2]})")
        result_string.append(f"Next training session: <t:{desc_dict['time'] + time_cooldown}:f>")

        if ch.cc('Training').value == ch.cc('Training').max:
            result_string.append(f"You have finished your training for {prof_name}! Run `!train clear` and come again next time!")

        else:
            pass

        if desc_dict['bypass']:
            result_string.append('**`Cooldown timer bypassed`**')
        
        else:
            pass

        return [f'{name} ({ctx.author.display_name}) Training Session: {prof_name}', '\n'.join(result_string)]

    else:
        return [f'{ctx.author.display_name} has encountered an error', results[1]]


output_list = main(&ARGS&)

left_arrow = "<"


</drac2>
-title "{{output_list[0]}}"
-f "{{output_list[1]}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/train/image.png"
-footer "!train {{left_arrow}}prof_name> | Updated 7/2/2023 | ShadowsStride"
embed
<drac2>
# *******************************************************
# * This work includes material taken from the System Reference Document 5.1 
# * (“SRD 5.1”) by Wizards of the Coast LLC and available at https://dnd.wizards.com/resources/systems-reference-document. 
# * The SRD 5.1 is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# * 
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    key_result = []

    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)


        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:

            key_result.append(key)

        else:
            pass

    # If there are matches, return a list
    if len(key_result) != 0:
        return key_result

    # If there are no matches, return a string
    else:
        return "None"

def get_settings_dict() -> dict:

    # Checks to see if the settings_svar exists
    settings_test = get_svar('training_settings', default="None")

    # If settings dict exists
    if settings_test != "None":
        settings_dict = load_json(settings_test)

    # If settings dict does not exist
    else:
        settings_dict = dict()

    # Maximum 'successes' value
    try:
        settings_dict['max_val']
    except:
        settings_dict['max_val'] = 10

    # CC display type
    try:
        settings_dict['disp_type']
    except:
        settings_dict['disp_type'] = 'star'

    # If jack of all trades adds to dice roll
    try:
        settings_dict['jack_of_trades']
    except:
        settings_dict['jack_of_trades'] = 1

    # Time cool down (default: 6 days 12 hours)
    try:
        settings_dict['time_cooldown']
    except:
        settings_dict['time_cooldown'] = 561600

    # Success thresholds
    try:
        settings_dict['thresholds']
    except:
        settings_dict['thresholds'] = {"-999": 0, "10": 1, "20": 2}

    # Checks to see if a default threshold is made
    try:
        settings_dict['thresholds']["-999"]
    except:
        settings_dict['thresholds']["-999"] = 0

    return settings_dict


def grab_tool_weapon_lang_skill() -> dict:
    """
    Grabs all the dictionaries necessary for the skills

    Return:
        (dict): Dictionary of all proficencies and relavant skills
    """

    # Setup
    full_dict = dict()
    list_dicts = []

    # Thank you genesisest for putting these dictionaries together
    # Tool dictionary
    tool_test = get_svar('tool_dict', default="None")
    if tool_test != 'None':
        list_dicts.append(load_json(tool_test))

    else:
        list_dicts.append(load_json(get_gvar('33d14ee1-3951-449e-86df-9630b1f75173')))

    # Language dictionary
    lang_test = get_svar('lang_dict', default="None")
    if lang_test != 'None':
        list_dicts.append(load_json(lang_test))
    
    else:
        list_dicts.append(load_json(get_gvar('70de35e5-aab5-4896-8f00-10bd85af732d')))

    # Weapon dictionary
    weapon_test = get_svar('weapon_dict', default="None")
    if weapon_test != 'None':
        list_dicts.append(load_json(weapon_test))

    else:
        list_dicts.append(load_json(get_gvar('7b5154d2-85bf-4581-91e9-46295c5581e6')))

    # Instrument dictionary
    instrument_test = get_svar('instrument_dict', default="None")
    if instrument_test != 'None':
        list_dicts.append(load_json(instrument_test))

    else:
        list_dicts.append(load_json(get_gvar('1c11be1f-d1c0-46b1-80cb-5a1ae5efafc8')))

    # Gaming set dictionary
    game_test = get_svar('gaming_dict', default="None")
    if game_test != 'None':
        list_dicts.append(load_json(game_test))

    else:
        list_dicts.append(load_json(get_gvar('1ff63486-fd0e-44fd-aa20-72165a92a840')))

    # Skill dictionary
    skill_test = get_svar('skill_dict', default="None")
    if skill_test != 'None':
        list_dicts.append(load_json(skill_test))
    else:
        list_dicts.append(load_json(get_gvar('49fa8417-b31c-4c8f-bb4c-69bdcf6fcc92')))

    # Combines all the dictionaries into one
    for dictionary in list_dicts:
        for key in dictionary.keys():
            full_dict[key] = dictionary[key]

    return full_dict


def find_highest_stat(stat_list: list, ch = character()) -> int:
    """
    Finds the highest ability mod that is relavant
    
    Args:
        stat_list (list): List of relavant abilities
        ch = character(): Character object

    Return:
        (int): Ability mod
    """

    # Sets threshold so that mod will always be changed
    mod = -999

    # For each relavant stat
    for stat in stat_list:

        # Strength
        if stat == "str":
            if strengthMod > mod:
                mod = strengthMod

            else:
                pass

        # Dexterity
        elif stat == "dex":
            if dexterityMod > mod:
                mod = dexterityMod

            else:
                pass

        # Constitution
        elif stat == "con":
            if constitutionMod > mod:
                mod = constitutionMod

            else:
                pass

        # Intelligence
        elif stat == "int":
            if intelligenceMod > mod:
                mod = intelligenceMod

            else:
                pass
        
        # Wisdom
        elif stat == "wis":
            if wisdomMod > mod:
                mod = wisdomMod

            else:
                pass

        # Charisma
        else:

            # Tries to find fey wanderer subclass
            subclass_test = ch.get_cvar("subclass", default="None")

            # If they do have fey wanderer subclass
            if "Fey Wanderer" in subclass_test:
                if charismaMod + wisdomMod > mod:
                    mod = charismaMod + wisdomMod

                else:
                    pass

            # If they do not fey wanderer subclass
            else:
                if charismaMod > mod:
                     mod = charismaMod

                else:
                    pass             

    return mod


def setup_training_cc(target: str, settings_dict: dict, ch = character()) -> list[str]:
    """
    Sets up the training CC
    
    Args:
        target (str): Target training name
        settings_dict (dict): Settings dictionary (svar)
        ch = character(): Character object

    Return:
        (list[str]): Result
    """

    full_dict = grab_tool_weapon_lang_skill()
    key_result = search_key(target, full_dict.keys())

    # If it finds at least one proficiency
    if key_result != "None":

        # If it find only one proficiency
        if len(key_result) == 1:
            target = key_result[0]

        # If it finds more than one proficiency
        else:
            for key in key_result:
                if name.lower() == key.lower():
                    
                    target = key
                    
                else:
                    pass
            
            key_result.insert(0, "**Multiple results found:**")

            return ["Error", "\n".join(key_result)]

    # If it does not find a proficiency
    else:
        return ['Error', 'Proficiency not found!']

    
    desc_dict = {"time": 0, "prof": target}

    # Creates the cc
    ch.create_cc(name="Training", minVal="0", maxVal=str(settings_dict['max_val'] - find_highest_stat(full_dict[target])), reset=None, dispType=settings_dict['disp_type'], reset_to="0", title=f"{name}'s training ({target})", desc=dump_json(desc_dict), initial_value=0)

    return ['Success']


def run_training_session(settings_dict, ch = character(), adv: int = 0, bonus: str = "None", ignore_time: bool = False) -> list[str]:
    """
    Runs a training session

    settings_dict (dict): Settings dictionary
    ch = character(): Character object
    adv (int): Advantage = 1, normal = 0, disadvantage = -1 (default 0)
    bonus (str): Bonus to roll. (default "None")
    ignore_time (bool): Whether to bypass cooldown (default False)

    Return:
        (list[str]): Result
    """

    counter = ch.cc("Training")

    # Full proficiency dictionary
    full_dict = grab_tool_weapon_lang_skill()

    # Dictionary from description
    desc_dict = load_json(counter.desc)

    # Current time (in epoch)
    current_time = int(round(time(), 0))

    # Grabs appropriate ability mod
    ability_mod = find_highest_stat(full_dict[desc_dict['prof']])

    # If it is run at the appropriate timeframe (or that is ignored)
    if (current_time >= desc_dict['time'] + settings_dict['time_cooldown']) or ignore_time:

        # If no advantage/disadvantage
        if adv == 0:
            dice = "1d20"
        
        # If advantage
        elif adv == 1:
            dice = "2d20kh1"

        # If disadvantage
        else:
            dice = "2d20kl1"

        # Checks for the bard jack of trades
        if settings_dict['jack_of_trades'] == 1:

            for (player_cls, level) in ch.levels:
                if player_cls == "Bard" and level >= 2:
                    if bonus == "None":
                        bonus = floor(proficiencyBonus / 2)

                    else:
                        bonus = f"{bonus} + {floor(proficiencyBonus / 2)}"

                else:
                    pass
        else:
            pass

        # If there is no bonus
        if bonus == "None":
            roll_check = vroll(f"{dice} + {ability_mod}")

        # If there is no bonus
        else:
            roll_check = vroll(f"{dice} + {bonus} + {ability_mod}")

        # Figures out how much the counter is increased by
        for key in settings_dict['thresholds'].keys():
            if roll_check.result.total >= int(key):
                mod_num = settings_dict['thresholds'][key]

            else:
                pass

        # Increases counter
        counter.mod(mod_num)

        # If time was not ignored
        if not ignore_time:
            desc_dict['time'] = current_time
            desc_dict['bypass'] = False

        # If time was ignored
        else:
            desc_dict['bypass'] = True

        # Edits the cc
        ch.edit_cc("Training", minVal="0", maxVal=str(settings_dict['max_val'] - ability_mod), desc=dump_json(desc_dict), dispType=settings_dict['disp_type'])
    
        return ['Success', roll_check, mod_num]

    # If time was not skipped and time cooldown has not been met
    else:
        return ['Error', f"You have until <t:{desc_dict['time'] + settings_dict['time_cooldown']}:f> before you can train again"]


def main(input_list: list[str] = [], ch=character()) -> list[str]:
    """
    Main program function
    
    Args:
        input_list (list[str]): List if inputs (default [])
        ch=character(): Character object

    Return:
        (list[str]): Result
    """

    # If length of inputs is not zero
    if len(input_list) != 0:

        # If the first input is not -b, -i, adv, or dis
        if input_list[0].lower() not in ['-b', '-i', 'adv', 'dis']:

            if ch.cc_exists("Training"):
                return [f'{ctx.author.display_name} has encountered an error', "Training CC already exists"]

            else:
                pass

            # Grabs settings dictionary
            settings_dict = get_settings_dict()

            # Pops train target from input list
            train_target = input_list.pop(0)
            
            # Parses arguments
            args = argparse(" ".join(input_list))
            adv = args.adv()
            bonus = args.last("b", default="None")
            ignore_time = args.last('i', default=False)

            # Sets up the training cc
            results = setup_training_cc(train_target, settings_dict)

            if results[0] != 'Error':
                pass
            
            else:
                return [f'{ctx.author.display_name} has encountered an error', results[1]]

        else:

            # If the training cc doesn't exist
            if not ch.cc_exists("Training"):
                return [f'{ctx.author.display_name} has encountered an error', "Training CC doesn't exist"]

            # If the training cc exists
            else:
                pass

            # Grabs settings dictionary
            settings_dict = get_settings_dict()

            # Parses arguments
            args = argparse(" ".join(input_list))
            adv = args.adv()
            bonus = args.last("b", default="None")
            ignore_time = args.last('i', default=False)

        # Runs training sessions
        results = run_training_session(settings_dict, adv=adv, bonus=bonus, ignore_time=ignore_time)

    else:

        # If training cc doesn't exist
        if not ch.cc_exists("Training"):
            return [f'{ctx.author.display_name} has encountered an error', "Training CC doesn't exist"]

        # If the training cc exists
        else:
            settings_dict = get_settings_dict()

            # Runs training session
            results = run_training_session(settings_dict)

    # if there was no error
    if results[0] != "Error":

        counter = ch.cc('Training')

        # Loads description 
        desc_dict = load_json(counter.desc)

        # Capitalizes proficiency
        prof_name = desc_dict['prof']
        prof_name_list_temp = prof_name.split(" ")
        prof_name_list = []
        for prof_name in prof_name_list_temp:
            prof_name_list.append(prof_name.capitalize())
        prof_name = " ".join(prof_name_list)

        # Results
        result_string = [f"{str(results[1])}"]
        result_string.append(ch.cc_str('Training'))
        result_string.append(f"{counter.value}/{counter.max}  (+{results[2]})")
        result_string.append(f"Next training session: <t:{desc_dict['time'] + settings_dict['time_cooldown']}:f>")

        # If the counter is finished
        if counter.value == counter.max:
            result_string.append(f"You have finished your training for {prof_name}! Run `!train clear` and come again next time!")

        else:
            pass

        # If cooldown was bypassed
        if desc_dict['bypass']:
            result_string.append('**`Cooldown timer bypassed`**')
        
        else:
            pass

        return [f'{name} ({ctx.author.display_name}) Training Session: {prof_name}', '\n'.join(result_string)]

    else:
        return [f'{ctx.author.display_name} has encountered an error', results[1]]


output_list = main(&ARGS&)
left_arrow = "<"
dash = "-"


</drac2>
-title "{{output_list[0]}}"
-f "{{output_list[1]}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/train/image.png"
-footer "!train {{left_arrow}}prof_name> {{left_arrow}}{{dash}}b> {{left_arrow}}adv/dis> | Updated 7/5/2023 | ShadowsStride"
embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    key_results = []

    # Checks each item if a match occurs
    for key in key_list:

        # If matches
        if query.lower() in key.lower():
            key_results.append(key)

        else:
            pass

    # Finds at least 1 match
    if len(key_results) > 0:
        return key_results

    # If it finds no matches
    else:
        return 'None'


def update_cc(ch: character, org_name: str, num: int) -> list[str]:
    try:
        cc = f"Rep - {org_name}"
        desc = f"reputation with {org_name}"

        ch.create_cc_nx(cc, None, None, "none", "Number", None, None, cc, desc, 0)
        ch.mod_cc(cc, int(num))

        # Gets reputation amount
        currentcc = ch.get_cc(cc)
    
    except:
        return ['Error', 'Problems altering/creating cc']

    return ['Success', currentcc]


def get_org_rewards_dict(rep_input: str) -> list[str]:
    """
    get_org_rewards_dict program function.

    Args:
        inputs (list[str]): Inputs passed
    
    Return:
        (list[str]): Outputs title, result string and img_url
    """

    # Loads the dictionary that contains the svar names
    organization_svar_test = get_svar("org_settings", default="None")

    if organization_svar_test != "None":
        organization_svar_dict = load_json(organization_svar_test)

    else:
        return ['Error', 'svar `org_list` does not exist!']

    
    key_result = search_key(str(rep_input), organization_svar_dict.values())

    # If there is at least 1 result
    if key_result != "None":

        # If there is only 1 result
        if len(key_result) == 1:
            return ['Success', key_result[0]]

        else:
            for key in key_result:
                if name.lower() == key.lower():
                    return ["Success", key_result[key]]

                else:
                    pass

            if org_dict_name != "":
                pass

            else:
                return ['Error', 'Organization not found!']

    else:
        return ['Error', 'Organization not found!']


def get_rewards(organization_dict_name: str, ch: character, cc_num: int) -> list[str]:

    rewards_test = get_svar(organization_dict_name, default="None")

    if rewards_test != "None":
        rewards_dict = load_json(rewards_test)

        try:
            org_name = rewards_dict['name']

        
        except:
            return ['Error', f'Reputation rewards svar `{organization_dict_name}` is missing the organization name!']

        try:
            img_url = rewards_dict['imgurl']
            results = update_cc(ch, org_name, cc_num)
        
            if results[0] != 'Error':
                currentcc = results[1]

            else:
                return results


        except:
            img_url = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png"

        rewards_list = ["**Current Redemption List:**", ""]

        # Grabs reward values
        for key in rewards_dict.keys():
            try:
                int(key)
                if currentcc >= int(key):
                    rewards_list.append(f"**{key} Points:**")
                    for reward in rewards_dict[key]:
                        rewards_list.append(reward)

                    rewards_list.append("")

                else:
                    pass

            except:
                pass

        if len(rewards_list) > 2:
            pass

        else:
            rewards_list = ["**Current Redemption List:**", "None", ""]

        return ['Success', '\n'.join(rewards_list), img_url, org_name, currentcc]

    else:
        return ['Error', f'Reputation rewards svar `{organization_dict_name}` does not exist!']


def main(input_list: list[str]) -> list[str]:
    img_url = 'https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png'
    ch = character()

    if len(input_list) >= 1:
        results = get_org_rewards_dict(input_list[0].lower())

        if results[0] != "Error":
            
            if len(input_list) > 1:
                num = input_list[1]
                results2 = get_rewards(results[1], ch, num)

            else:
                num = 0
                results2 = get_rewards(results[1], ch, num)

            if results2[0] != 'Error':
                result_string = [results2[1], f"**Current Reputation:** {results2[4]}"]

                num = int(num)

                if num > 0:
                    title = f'{name} ({ctx.author.display_name}) added {num} to their reputation with {results2[3]}'
                
                elif num < 0:
                    title = f'{name} ({ctx.author.display_name}) removed {num * -1} from their reputation with {results2[3]}'

                else:
                    title = f'{name} ({ctx.author.display_name}) is checking their reputation with {results2[3]}'
                

                return [title, "\n".join(result_string), results2[2]]

            else:
                return [f'{ctx.author.display_name} has encountered an error', results2[1], img_url]

        else:
            return [f'{ctx.author.display_name} has encountered an error', results[1], img_url]

    else:
        return [f'{ctx.author.display_name} has encountered an error', 'Expected 1 or 2 arguments', img_url]


# Main function
output = main(&ARGS&)
left_arrow = "<"


</drac2>
-title "{{output[0]}}"
-f "{{output[1]}}"
-thumb "{{output[2]}}"
-footer "!rep [organization] {{left_arrow}}#> | Updated 7/8/23 | ShadowsStride"
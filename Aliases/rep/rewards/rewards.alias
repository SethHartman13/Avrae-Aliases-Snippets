embed
<drac2>
# Grabs cvar and creates error list

def main(inputs:str) -> list:

    ch=character()
    error = []

    # Checks to see if it has the valid number of inputs
    if len(inputs) == 1:

        # Lowercases input
        rep_input = inputs[0].lower()

        # Starts rewards list
        rewards = ["**Rewards:**"]


    # If it does not have a valid number of inputs
    else:
        rep_input = "Error"
        error.append("Expected 1 argument")

    # Grabs the organization dictionary
    organization_dictionary = load_json(get_svar("org_settings"))
    organization_list = []
    for value in organization_dictionary.values():
        organization_list.append(value)

    # If the svar is empty
    if len(organization_list) == 0 or organization_list == "0":
        rep_input = "Error"
        error.append("svar org_list does not exist!")

    # If the svar is not empty
    else:
        org_dictionaries = []
        try:
            for org in organization_list:
                org_dictionaries.append(load_json(get_svar(org)))
                

            org_names = []

            for org_dict in org_dictionaries:

                # Verifies that the dictionary has the name property
                try:
                    org_names.append(org_dict["name"])
                except:
                    error.append(f"Problem with dictionary {org_dict} with name")
        except:
            rep_input = "Error"
            error.append("svar org_list does not exist!")
            
    # If there have been no errors so far
    if len(error) == 0:

        # Creates boolean
        repfound = 0

        # For each organization, it will create iterations, then compare input against them
        for org_name in org_names:

            # Makes it so that the first organization found first is selected
            if repfound == 0:

                # Creates all the valid iterations
                initial_org_iterations = []
                org_iterations = []
                lst = []
                lst[:] = org_name.lower()


                for i in range(len(org_name) + 1):
                    initial_org_iterations.append(lst[:i])

                # So, what happens is it will create iterations like 'r' and 're'
                # This removes the first two so that at least three letters are needed
                initial_org_iterations.pop(0)
                initial_org_iterations.pop(0)

                # Puts the iterations into a single list.
                for iteration in initial_org_iterations:
                    org_iterations.append("".join(iteration))

                # If it does find an organization
                if rep_input in org_iterations:
                    rep_input = org_name
                    repfound = 1

                    # Pulls the dictionary and sets it as the dictionary to pull form
                    for dictionary in org_dictionaries:
                        if rep_input == dictionary["name"]:
                            global_dictionary = dictionary
                        else:
                            pass

                else:
                    pass

            else:
                pass
        
        # If it does not find an organization
        if repfound == 0:
            error.append("Organization not found")
            rep_input = "Error"

        else:
            pass

    else:
        pass

    if len(error) == 0:
        org_name = global_dictionary["name"]

        # Finds keys that are supposed to be integers
        int_keys = []

        for key in global_dictionary.keys():

            try:
                int(key)
            except "ValueError":
                pass
            else:
                int_keys.append(key)

        thresholds = []

        # Pulls each key and puts them in the thresholds
        for key in int_keys:
            thresholds.append(key)

        # Prints out rewards
        if len(thresholds) > 0:
            for threshold in thresholds:
                rewards.append(f"**{threshold} Points:**")
                for item in global_dictionary[threshold]:
                    rewards.append(item)
                rewards.append("")

        else:
            rewards.append("None")

        # Join together all the rewards into a string
        rewardstring = "\n".join(rewards)
    
    else:
        pass

    if len(error) == 0:
        title = f"{name} checks the rewards of {org_name}"

        try:
            thumbnail = global_dictionary["imgurl"]
        except:
            thumbnail = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png"

    # If there was an error, it writes out the errors
    else:
        title = f"{name} had following error(s) occur:"
        rewardstring = ", ".join(error)
        thumbnail = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png"

    # Handles outsputs
    output_list = []
    output_list.append(title)
    output_list.append(rewardstring)
    output_list.append(thumbnail)

    return output_list

# Main function
output = main(&ARGS&)

title = output[0]
rewardstring = output[1]
thumbnail = output[2]

</drac2>

-title "{{title}}"
-f "{{rewardstring}}"
-thumb "{{thumbnail}}"
-footer "!rep rewards [organization] | Updated 6/8/23 | ShadowsStride"
embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    results_keys = []

    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)


        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:

            results_keys.append(key)

        else:
            pass

    # If there are matches, return a list
    if len(results_keys) != 0:
        return results_keys

    # If there are no matches, return a string
    else:
        return "None"


def get_rewards(organization_dict_name: str) -> list[str]:
    rewards_test = get_svar(organization_dict_name, default="None")

    if rewards_test != "None":
        rewards_dict = load_json(rewards_test)

        try:
            org_name = rewards_dict['name']
        
        except:
            return ['Error', f'Reputation rewards svar `{organization_dict_name}` is missing the organization name!']

        try:
            img_url = rewards_dict['imgurl']
            
        except:
            img_url = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png"

        rewards_list = []
        rewards_list.append("**Rewards:**")
        rewards_list.append("")
        # Grabs reward values
        for key in rewards_dict.keys():
            try:
                int(key)

                rewards_list.append(f"**{key} Points:**")
                for reward in rewards_dict[key]:
                    rewards_list.append(reward)

                rewards_list.append("")

            except:
                pass

        if len(rewards_list) > 0:
            return ['Success', '\n'.join(rewards_list), img_url, org_name]

        else:
            return ['Success', 'None', img_url, org_name]

    else:
        return ['Error', f'Reputation rewards svar `{organization_dict_name}` does not exist!']



def get_org_rewards_dict(rep_input: str) -> list[str]:
    """
    get_org_rewards_dict program function.

    Args:
        inputs (list[str]): Inputs passed
    
    Return:
        (list[str]): Outputs title, result string and img_url
    """

    # Loads the dictionary that contains the svar names
    organization_svar_test = get_svar("org_settings", default="None")

    if organization_svar_test != "None":
        organization_svar_dict = load_json(organization_svar_test)

    else:
        return ['Error', 'svar `org_list` does not exist!']

    
    key_result = search_key(str(rep_input), organization_svar_dict.values())

    # If there is at least 1 result
    if key_result != "None":

        # If there is only 1 result
        if len(key_result) == 1:
            return ['Success', key_result[0]]

        else:
            for key in key_result:
                if name.lower() == key.lower():
                    return ["Success", key_result[key]]

                else:
                    pass

            return ['Error', 'Organization not found!']

    else:
        return ['Error', 'Organization not found!']


def main(input_list: list[str]) -> list[str]:

    # Checks to see if it has the valid number of inputs
    if len(input_list) >= 1:

        # Starts rewards list
        results = get_org_rewards_dict(input_list[0].lower())

    # If it does not have a valid number of inputs
    else:
        return [f'{ctx.author.display_name} has encountered an error', 'Expected 1 argument', 'https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png']


    if results[0] != "Error":

        results2 = get_rewards(results[1])

    else:
        return [f'{ctx.author.display_name} has encountered an error', results[1], 'https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png']


    if results2[0] != 'Error':
        return [f'{ctx.author.display_name} views the rewards for {results2[3]}', results2[1], results2[2]]

    else:
        return [f'{ctx.author.display_name} has encountered an error', results2[1], 'https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png']
    

# get_org_rewards_dict function
output = main(&ARGS&)


</drac2>
-title "{{output[0]}}"
-f "{{output[1]}}"
-thumb "{{output[2]}}"
-footer "!rep rewards [organization] | Updated 6/26/23 | ShadowsStride"
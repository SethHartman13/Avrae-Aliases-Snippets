embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    key_results = []

    # Checks each item if a match occurs
    for key in key_list:

        # If matches
        if query.lower() in key.lower():
            key_results.append(key)

        else:
            pass

    # Finds at least 1 match
    if len(key_results) > 0:
        return key_results

    # If it finds no matches
    else:
        return None


def get_details(organization_dictionary: dict) -> list[str]:
    """
    Grabs known organization names

    Args:
        organization_dictionary (dict): Organization dictionary

    Return:
        (list[str]): Result
    """

    # Builds rewards list
    names_list = ["***Known Organizations:***"]

    # If there are no items in the organization dictionary
    if len(organization_dictionary.keys()) == 0:
        names_list.append("None")

    # If there are items in the organization dictionary
    else:
        for name in organization_dictionary.keys():
            names_list.append(name)


    return [f"{ctx.author.display_name} checks known organizations", "\n".join(names_list), "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png", ""]


def grab_organization_dictionaries() -> dict:
    """
    Creates dictionary containing all the organizations

    Args:
        None
    
    Return:
        (dict): Dictionary containing organization dictionaries
    """

    # Grabs organization settings list/dictionary
    organization_test = get_svar("org_settings")

    # If svar exists
    if organization_test:
        organization_container = load_json(organization_test)

    # If svar does not exist
    else:
        return ['Error', 'svar `org_settings` does not exist!']

    # If svar is using legacy dictionary
    if typeof(organization_container) == "SafeDict":
        container = organization_container.values()

    # If svar is using updated list style
    elif typeof(organization_container) == "SafeList":
        container = organization_container

    # If for some reason this is a string
    else:
        container = [str(organization_container)]

    full_organization_dictionary = dict()

    # It will search gvars and svars to pull dictionaries
    for item in container:

        # Tries to search svar
        svar_test = get_svar(item)

        # If svar exists, load dictionary
        if svar_test:
            test_dictionary = load_json(svar_test)

            # Try to search for name
            try:
                key_result = search_key("name", test_dictionary.keys())

            # If there is a problem loading dictionary
            except:
                key_result = None

        # If svar doesn't exist, try to search gvar
        else:
            gvar_test = get_gvar(item)

            # If gvar exists, load dictionary
            if gvar_test:
                test_dictionary = load_json(gvar_test)

                # Try to search for name
                try:
                    key_result = search_key("name", test_dictionary.keys())

                # If there is a problem loading dictionary
                except:
                    key_result = None

            # If gvar does not exist
            else:
                pass

        # If it finds a name
        if key_result:
            full_organization_dictionary[test_dictionary[key_result[0]]] = test_dictionary

        # If it doesn't find a name
        else:
            pass

    return full_organization_dictionary


def main(input_list: list[str]) -> list[str]:
    """
    Main program function

    Args:
        input_list (list[str]): List of inputs

    Return:
        (list[str]): Result
    """

    # Defaults
    full_organization_dictionary = grab_organization_dictionaries()
    img_url = 'https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/rep/image.png'

    # If an error has not occured
    if typeof(full_organization_dictionary) != "SafeList":
        pass

    # If an error has occured
    else:
        return [f"{ctx.author.display_name} has encountered an error", full_organization_dictionary[1], img_url, "#CC0202"]


    return get_details(full_organization_dictionary)


# Main function
output_list = main(&ARGS&)


</drac2>
-title "{{output_list[0]}}"
-f "{{output_list[1]}}"
-thumb "{{output_list[2]}}"
-color "{{output_list[3]}}"
-footer "!rep list | Updated 9/12/23 | ShadowsStride"
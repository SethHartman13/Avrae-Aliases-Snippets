embed
<drac2>
# *******************************************************
# * This work includes material taken from the System Reference Document 5.1 
# * (“SRD 5.1”) by Wizards of the Coast LLC and available at https://dnd.wizards.com/resources/systems-reference-document. 
# * The SRD 5.1 is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# * 
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def set_default_settings(dictionary: dict, default_dictionary: dict) -> dict:
    """
    Loops through dictionary checking for missing entries and adding default ones where necessary

    Args:
        dictionary (dict): Dictionary to be checked
        default_dictionary (dict): Default dictionary

    Return:
        dict: Corrected dictionary
    """

    # For each key in the default dictionary
    for default_key in default_dictionary.keys():

        if default_key in dictionary.keys():
            pass

        else:
            dictionary[default_key] = default_dictionary[default_key]

    return dictionary


def get_classes(ch: character, subclass_bool: int, full_subclass_bool: int) -> str:
    """
    Grabs class information and (optional) subclass information
    
    Args:
        ch (character): Character object
        subclass_bool (bool): Whether subclass is included

    Return:
        result_string (str): Resultant string
    """
    # Variable setup
    class_list = []

    if subclass_bool == 1:
        if (cvar_subclass_test := ch.get_cvar('subclass')):
            cvar_subclass_dict = load_json(cvar_subclass_test)

        else:
            subclass_bool = 0

    else:
        pass

    # Grabs all the class(es) and level(s)
    class_details = {player_cls: level for player_cls, level in ch.levels}

    for player_cls, cls_level in class_details.items():

        if "blood" not in player_cls.lower():
            pass

        else:
            player_cls = "blood"

        if (result_key := search_list(player_cls, cvar_subclass_dict.keys())) and subclass_bool == 1:

            match result_key[0]:

                case c if "barbarian" in c.lower():

                    if cls_level >= 3 and full_subclass_bool == 1:

                        if cvar_subclass_dict[result_key[0]] != "Wild Magic":
                            class_list.append(f"Path of the {cvar_subclass_dict[result_key[0]]} Barbarian ({cls_level})")

                        else:
                            class_list.append(f"Path of Wild Magic Barbarian ({cls_level})")

                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Barbarian ({cls_level})")

                    else:
                        class_list.append(f"Barbarian ({cls_level})")


                case c if "bard" in c.lower():

                    if cls_level >= 3 and full_subclass_bool == 1:
                        class_list.append(f"College of {cvar_subclass_dict[result_key[0]]} Bard ({cls_level})")

                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Bard ({cls_level})")

                    else:
                        class_list.append(f"Bard ({cls_level})")

                case c if "blood" in c.lower():

                    if cls_level >= 3 and full_subclass_bool == 1:
                        class_list.append(f"Order of the {cvar_subclass_dict[result_key[0]]} Blood Hunter ({cls_level})")

                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Blood Hunter ({cls_level})")

                    else:
                        class_list.append(f"Blood Hunter ({cls_level})")

                case c if "cleric" in c.lower():
                    if full_subclass_bool == 1:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Domain Cleric ({cls_level})")

                    else:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Cleric ({cls_level})")

                case c if "druid" in c.lower():
                    if cls_level >= 2 and full_subclass_bool == 1:
                        if cvar_subclass_dict[result_key[0]] in ['Dreams', 'Spores', 'Stars', 'Wildfire']:
                            class_list.append(f"Circle of {cvar_subclass_dict[result_key[0]]} Druid ({cls_level})")

                        else:
                           class_list.append(f"Circle of the {cvar_subclass_dict[result_key[0]]} Druid ({cls_level})")

                    elif cls_level >= 2:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Druid ({cls_level})")

                    else:
                        class_list.append(f"Druid (1)")

                case c if "monk" in c.lower():
                    if cls_level >= 3 and full_subclass_bool == 1:
                        if cvar_subclass_dict[result_key[0]] not in ['Mercy', 'Shadow']:
                            class_list.append(f"Way of the {cvar_subclass_dict[result_key[0]]} Monk ({cls_level})")

                        else:
                            class_list.append(f"Way of {cvar_subclass_dict[result_key[0]]} Monk ({cls_level})")

                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Monk ({cls_level})")

                    else:
                        class_list.append(f"Monk ({cls_level})")

                case c if "paladin" in c.lower():
                    if cls_level >= 3 and full_subclass_bool == 1 and cvar_subclass_dict[result_key[0]] != "Oathbreaker":
                        if cvar_subclass_dict[result_key[0]] in ['Conquest', 'Devotion', 'Glory', 'Redemption', 'Vengeance']:
                            class_list.append(f"Oath of {cvar_subclass_dict[result_key[0]]} Paladin ({cls_level})")

                        else:
                            class_list.append(f"Oath of the {cvar_subclass_dict[result_key[0]]} Paladin ({cls_level})")

                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Paladin ({cls_level})")

                    else:
                        class_list.append(f"Paladin ({cls_level})")

                case c if "warlock" in c.lower():
                    class_list.append(f"{cvar_subclass_dict[result_key[0]]} Warlock ({cls_level})")

                case c if "wizard" in c.lower():
                    if cls_level >= 2 and full_subclass_bool and cvar_subclass_dict[result_key[0]] not in ["Bladesinger", "War Magic"]:

                        match cvar_subclass_dict[result_key[0]]:

                            case "Scribes":
                                class_list.append(f"Order of {cvar_subclass_dict[result_key[0]]} Wizard ({cls_level})")

                            case c if c in ['Graviturgist', 'Chronurgy']:
                                class_list.append(f"{cvar_subclass_dict[result_key[0]]} Magic Wizard ({cls_level})")

                            case _:
                                class_list.append(f"School of {cvar_subclass_dict[result_key[0]]} Wizard ({cls_level})")

                    elif cls_level >= 2:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Wizard ({cls_level})")

                    else:
                        class_list.append(f"Wizard ({cls_level})")

                case _:

                    if cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} {result_key[0].split('Level')[0]} ({cls_level})")

                    else:
                        class_list.append(f"{result_key[0]} ({cls_level})")

        else:
            class_list.append(f"{player_cls} ({cls_level})")

    # Says whether or not it is a multiclass or not
    if len(class_list) > 1:
        return "\n".join(class_list + ["", f"**Total levels:** {ch.levels.total_level}"])       
    else:
        return "\n".join(class_list)


def get_passives(ch: character, ins_bool: int, inv_bool: int, perc_bool: int) -> str:
    """
    Grabs character's passives

    Args:
        ch (character): Character object
        ins_bool (int): If passive insight is included
        inv_bool (int): If passive investigation is included
        perc_bool (int): If passive perception is included 

    Return:
        (str): Resultant string
    """
    result_list = []

    if ins_bool == 1 or perc_bool == 1:
        if (feat_cvar_test := ch.get_cvar('feats')):

            if 'obs' in feat_cvar_test.lower():
                observant = True

            else:
                observant = False

        else:
            observant = False

        # If Passive Perception
        if perc_bool == 1:

            match (observant, typeof(ch.skills.perception.adv)):

                # Straight value
                case (False, "NoneType"):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value}")

                # Observant
                case (True, "NoneType"):
                    result_list.append(f"**Passive Perception:** {10 + 5 + ch.skills['perception'].value} [observant]")

                # Advantage
                case (False, _):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value + 5} [advantage]")

                # Observant and advantage
                case (True, _):
                    result_list.append(f"**Passive Perception:** {10 + 5 + ch.skills['perception'].value + 5} [observant and advantage]")

                # Disadvantage
                case (False, False):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value - 5} [disadvantage]")

                # Observant and Disadvantage
                case (True, False):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value} [observant and disadvantage]")
        
        # If not Passive Perception
        else:
            pass

        # If Passive Insight
        if ins_bool == 1:

            match (observant, typeof(ch.skills.insight.adv)):

                # Straight value
                case (False, "NoneType"):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value}")

                # Observant
                case (True, "NoneType"):
                    result_list.append(f"**Passive Insight:** {10 + 5 + ch.skills['insight'].value} [observant]")

                # Advantage
                case (False, _):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value + 5} [advantage]")

                # Observant and advantage
                case (True, _):
                    result_list.append(f"**Passive Insight:** {10 + 5 + ch.skills['insight'].value + 5} [observant and advantage]")

                # Disadvantage
                case (False, False):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value - 5} [disadvantage]")

                # Observant and Disadvantage
                case (True, False):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value} [observant and disadvantage]")
        
        # If not Passive Perception
        else:
            pass

    # If no Passive Perception or Passive Insight
    else:
        pass

    # If Passive Investigation
    if inv_bool == 1:

        match typeof(ch.skills.investigation.adv):

            # Straight Value
            case "NoneType":
                result_list.append(f"**Passive Investigation:** {10 + ch.skills['investigation'].value}")

            # Advantage
            case _ if ch.skills.investigation.adv:
                result_list.append(f"**Passive Investigation:** {10 + ch.skills['investigation'].value + 5} [advantage]")

            # Disadvantage
            case _:
                result_list.append(f"**Passive Investigation:** {10 + ch.skills['investigation'].value - 5} [disadvantage]")

    # If not Passive Investigation
    else:
        pass

    return "\n".join(result_list)
    

def main(input_list: list[str]) -> str:
    """
    Main program function

    Args:
        input_string (str): String given as input

    Output:
        (list): List of outputs
    """

    ch = character()

    # If 
    if (svar_test := get_svar("lfg_settings")):
        svar_dict = set_default_settings(load_json(svar_test), {'subclass': 1, 'thp': 1, 'img': 1, 'player': 0, 'ac': 0, 'ins': 0, 'inv': 0, 'perc': 0, 'spell_list': 0, 'spell_slot': 0, 'full_subclass': 0, "color_lvl": {"0": ""}, "response_req": 0})

    else:
        svar_dict = {'subclass': 1, 'thp': 1, 'img': 1, 'player': 0, 'ac': 0, 'ins': 0, 'inv': 0, 'perc': 0, 'spell_list': 0, 'spell_slot': 0, 'full_subclass': 0, "color_lvl": {"0": ""}, "response_req": 0}

    title = f"{name} is looking for a group!"

    if (thumb := ch.image) != "" and svar_dict['img'] == 1:
        pass
    
    else:
        thumb = "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/lfg/image.png"

    if svar_dict['response_req'] == 0 or len(input_list) > 0:
        pass

    else:
        return f"{ctx.author.display_name} has encountered an error", "You are required to give a quest suggestion/response", thumb, "#CC0202"

    f = [
        "**Quest:** " + " ".join(input_list)
    ]

    f.append(get_classes(ch, svar_dict['subclass'], svar_dict['full_subclass']))

    if svar_dict['thp'] == 1:
        f.append(f"**HP:** {ch.hp_str()}")

    else:
        f.append(f"**HP:** {ch.hp}")

    # Show AC
    if svar_dict['ac'] == 1:
        f.append(f"**AC:** {ch.ac}")

    else:
        pass

    if svar_dict['ins'] == 1 or svar_dict['inv'] == 1 or svar_dict['perc'] == 1:
        f.append(get_passives(ch, svar_dict['ins'], svar_dict['inv'], svar_dict['perc']))

    else:
        pass

    if svar_dict['spell_list'] == 1 and len((spell_list := [spell.name for spell in ch.spellbook.spells if spell.prepared])) > 0:
        f.append("**Prepared Spell List:** " + ", ".join(spell_list))

    else:
        pass

    if svar_dict['spell_slot'] == 1 and len((spell_book := [ch.spellbook.slots_str(i) for i in range(1, 10) if ch.spellbook.slots_str(i) != "No spell slots."])) > 0:
        spell_book.insert(0, "**Spell Slots:**")

        f.append("\n".join(spell_book))

    else:
        pass

    if svar_dict['player'] == 1:
        f.append(f"<@{ch.owner}>")

    else:
        pass

    if (crafting_svar_test := get_svar('crafting_settings')):

        crafting_svar_dict = load_json(crafting_svar_test)

        if 'lfg_integration' in crafting_svar_dict.keys():
            if not crafting_svar_dict['lfg_integration']:
                pass

            else:
                if (crafting_cvar_test := ch.get_cvar('crafting_dict')):
                    crafting_cvar_dict = load_json(crafting_cvar_test)

                    try:
                        if time() >= crafting_cvar_dict['time'] + crafting_svar_dict[crafting_cvar_dict['category']][crafting_dictionary['type']][6]:
                            pass

                        else:
                            f.append("`This character's crafting cooldown has not expired`")

                    except:
                        f.append("`Problems have occured with the crafting integration, please contact Shadow through his request form in the workshop`")

                else:
                    pass

        else:
            pass

    else:
        pass
        
    if typeof(svar_dict['color_lvl']) == "SafeDict":
        color = ""

        for color_threshold in svar_dict['color_lvl'].keys():
            try:
                if ch.levels.total_level >= int(color_threshold):
                    color =  svar_dict['color_lvl'][color_threshold]

                else:
                    pass
            except:
                pass

    elif typeof(svar_dict['color_lvl']) == "str":
        color = svar_dict['color_lvl']

    else:
        try:
            color = randchoice(svar_dict['color_lvl'])

        except:
            color = ""
        
    return title, "\n\n".join(f), thumb, color


# Main program
title, f, thumb, color = main(&ARGS&)
l = "<"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "!lfg {{l}}phrase> | Updated 11/14/23 | ShadowsStride"
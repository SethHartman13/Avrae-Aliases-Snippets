embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|None:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (list[str]|None): If it finds at least one match it returns list of matches, otherwise it returns None
    """

    # Creates list to store matches
    key_results = []

    # Checks each item if a match occurs
    for key in key_list:

        # If matches
        if query.lower() in key.lower():
            key_results.append(key)

        else:
            pass

    # Finds at least 1 match
    if len(key_results) > 0:
        return key_results

    # If it finds no matches
    else:
        return None

def get_saved_time(name: str = "dm_time") -> list[str]:
    """
    Function that handles getting the time.

    Args:
        name (str): Name of tracker, default: dm_time

    Return:
        (list[str]): Results
    """

    # Pulls and checks if uvar exists
    all_server_test = get_uvar("clock_dict")

    # If the uvar exists
    if all_server_test:
        pass

    # If the uvar does not exist
    else:
        set_uvar("clock_dict", "{}")
        all_server_test = dict()
    
    # Tries to convert the uvar to a dictionary
    try:
        all_server_dict = load_json(all_server_test)

    except:
        return 'Error', 'Problems loading dictionary'

    # Searches for server id
    key_result = search_key(str(ctx.guild.id), all_server_dict.keys())

    # If the server exists
    if key_result:
        pass

    # If the server doesn't exist, create an entry (with dm_time)
    else:
        all_server_dict[str(ctx.guild.id)] = {"dm_time": [False, round(time(),0), 0, 0]}

    # Searches for tracker name
    key_result = search_key(name, all_server_dict[str(ctx.guild.id)].keys())

    # If there was at least one match
    if key_result:

        # If there was only one match, return result_list and grab key_name
        if len(key_result) == 1:
            return key_result[0], all_server_dict[str(ctx.guild.id)][key_result[0]]

        # If there was more than one match
        else:

            # Set default
            result_list = None

            # For each match
            for key in key_result:

                # If it doesn't exactly match
                if name.lower() != key.lower():
                    pass

                # If it does match, return result_list and key
                else:
                    return key, all_server_dict[str(ctx.guild.id)][key]

        # If an exact match was found
        if result_list:
            pass

        # If an exact match was not found
        else:
            key_result.insert(0, "**Multiple trackers found:**")
            
            return -1, "\n".join(key_result)

    # If there were no matches
    else:
        return -1, "Tracker not found!\nPlease run `!clock create [tracker name]`"


def set_time_uvar(tracker_list: list, tracker_key: str) -> None:
    """
    Updates time uvar.

    Args:
        tracker_list(list): time uvar contents
        tracker_key (str): Key used for dictionary    
    """

    # Grabs all_server_dict
    all_server_dict = load_json(get_uvar("clock_dict"))

    # Pulls up the dict for the server
    server_dict = all_server_dict[f"{ctx.guild.id}"]

    # Provides an updated tracker list
    new_tracker_list = [True, round(time(), 0), tracker_list[2], tracker_list[3] + 1]
    server_dict[tracker_key] = new_tracker_list

    # Update uvar
    all_server_dict[f"{ctx.guild.id}"] = server_dict
    set_uvar("clock_dict", dump_json(all_server_dict))
    

def calc_time(time:int) -> str:
    """
    Converts seconds into hours, minutes, seconds.
    
    Args:
        time(int): Time in seconds

    Return:
        (str): Result
    """

    result_list = []

    # Weeks
    if (weeks := time // 604800) > 0:
        if hours != 1:
            result_list.append(f"{weeks} weeks")
        
        else:
            result_list.append(f"{weeks} week")
    
    else:
        pass

    # Intermediary calc 1
    t1 = time % 604800

    # Days
    if (days := t1 // 86400) > 0:
        if days != 1:
            result_list.append(f"{days} days")
        
        else:
            result_list.append(f"{days} day")
    
    else:
        pass

    # Intermediary calc 2
    t2 = t1 % 86400

    # Hours
    if (hours := t2 // 3600) > 0:
        if hours != 1:
            result_list.append(f"{hours} hours")
        
        else:
            result_list.append(f"{hours} hour")
    
    else:
        pass

    # Intermediary calc 3
    t3 = t2 % 3600

    # Minutes
    if (minutes := t3 // 60) > 0:
        if minutes != 1:
            result_list.append(f"{minutes} minutes")
        
        else:
            result_list.append(f"{minutes} minute")
    
    else:
        pass

    # Seconds
    if (seconds := t3 % 60) > 0:
        if seconds != 1:
            result_list.append(f"{seconds} seconds")
        
        else:
            result_list.append(f"{seconds} second")
    
    else:
        pass

    return ", ".join(result_list)


def main(input_list: list[str]) -> str, str:
    """
    Main program function.
    
    Args:
        input_list(list[str]): List of inputs
    
    Output:
        (list[str]): Result
    """

    # If the length of inputs is 0, will automatically choose the dm timer
    if len(input_list) == 0:
        tracker_name, data_list = get_saved_time()

    # Grabs first input.
    else:
        tracker_name, data_list = get_saved_time(input_list[0])

    if tracker_name != -1:
        if not data_list[0]:
            pass

        else:
            return f"{ctx.author.display_name} has encountered an error", f"{tracker_name} is already active"

        # Updates the time
        set_time_uvar(data_list, tracker_name)
        
        result_list = []
        result_list.append(f"**Current total time:** {calc_time(data_list[2])}")
        result_list.append(f"**Current clock-ins:** {data_list[3] + 1}")
        result_list.append(f"**Time since last clock-out:** {calc_time(floor(time()) - data_list[1])}")

        return f"{ctx.author.display_name}: {tracker_name} tracker has started", "\n".join(result_list)

    else:
        return f"{ctx.author.display_name} has encountered an error", data_list


# Runs main program
title, f = main(&ARGS&)
left_arrow = "<"


</drac2>
-title "{{title}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/clock/image.png"
-f "{{f}}"
-footer "!clock in {{left_arrow}}tracker name> | Updated 9/27/23 | ShadowsStride"
embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def calc_time(time:int) -> str:
    """
    Converts seconds into weeks, days, hours, minutes, seconds.
    
    Args:
        time(int): Time in seconds

    Return:
        (str): Result
    """

    result_list = []

    # Weeks
    if (weeks := int(time // 604800)) > 0:
        if weeks != 1:
            result_list.append(f"{weeks} weeks")
        
        else:
            result_list.append(f"{weeks} week")
    
    else:
        pass

    # Intermediary calc 1
    t1 = time % 604800

    # Days
    if (days := int(t1 // 86400)) > 0:
        if days != 1:
            result_list.append(f"{days} days")
        
        else:
            result_list.append(f"{days} day")
    
    else:
        pass

    # Intermediary calc 2
    t2 = t1 % 86400

    # Hours
    if (hours := int(t2 // 3600)) > 0:
        if hours != 1:
            result_list.append(f"{hours} hours")
        
        else:
            result_list.append(f"{hours} hour")
    
    else:
        pass

    # Intermediary calc 3
    t3 = t2 % 3600

    # Minutes
    if (minutes := int(t3 // 60)) > 0:
        if minutes != 1:
            result_list.append(f"{minutes} minutes")
        
        else:
            result_list.append(f"{minutes} minute")
    
    else:
        pass

    # Seconds
    if (seconds := int(t3 % 60)) > 0:
        if seconds != 1:
            result_list.append(f"{seconds} seconds")
        
        else:
            result_list.append(f"{seconds} second")
    
    else:
        pass

    # If there is at least time measure
    if len(result_list) > 0:
        return ", ".join(result_list)

    # If there are no time measures
    else:
        return "0 Seconds"

def get_trackers() -> list[str]:
    """
    Gets the list of trackers for a player.

    Return:
        (list[str]): Result
    """

    # Pulls and checks if uvar exists
    if (all_server_test := get_uvar("clock_dict")):
        pass

    # If the uvar does not exist
    else:
        return -1, 'UVAR `clock_dict` does not exist'
    
    # Tries to convert the uvar to a dictionary
    try:
        all_server_dict = load_json(all_server_test)

    except:
        return -1, 'Problems loading dictionary'

    # If the Server ID is in the time_dict
    if (key_result := search_list(str(ctx.guild.id), all_server_dict.keys())):
        result_list = []

        # Pulls names of every tracker
        for key, value in all_server_dict[key_result[0]].items():

            # If the key is not the default tracker
            if key != "dm_time":
                pass

            # If the key is the default tracker
            else:
                key = "DM Time"

            # If the time in the tracker is with the updated format
            if len(value) > 4:

                # If the timer is active, add time since start of tracker and all-time
                if value[0]:
                    time_str = calc_time(value[4] + int(time()) - value[1] )

                # If the timer is not active, just do all-time
                else:
                    time_str = calc_time(value[4])

                # Add results to output
                result_list.append(f"**{key}:**")
                result_list.append(f"Time: {time_str}")
                result_list.append(f"Clock-ins: {value[5]}\n")
                result_list.append("")

            # If the time is not with the updated format, just state it is not setup
            else:
                result_list.append(f"**{key}** tracker all-time not setup")
                result_list.append("")

        # If the list is not length of 0
        if len(result_list) != 0:
            return "\n".join(result_list), ""

        # If the list is length of 0
        else:
            return "None", ""
        
    # If the Server ID is not in the time_dict
    else:
        return 'None', ""

    
def main(input_list: list[str]) -> str:
    """
    Main program function.
    
    Args:
        input_list(list[str]): List of inputs
    
    Output:
        str: Result
    """

    # Grabs tracker names, if any.
    f, error = get_trackers()

    # If there was no error
    if f != -1:
        return f"{ctx.author.display_name}: Current time trackers", f

    # If there was an error
    else:
        return f"{ctx.author.display_name} encountered an error", error


# Main program function
title, f = main(&ARGS&)


</drac2>
-title "{{title}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/clock/image.png"
-f "{{f}}"
-footer "!clock alltime | Updated 10/26/23 | ShadowsStride"
embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    results_keys = []

    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)


        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:

            results_keys.append(key)

        else:
            pass

    # If there are matches, return a list
    if len(results_keys) != 0:
        return results_keys

    # If there are no matches, return a string
    else:
        return "None"

def get_saved_time(name: str) -> list[str]:
    """
    Function that handles getting the time (and making sure things exist).

    Args:
        name (str): Name of tracker

    Return:
        (list[str]): Results
    """

    # Pulls and checks if uvar exists
    all_server_test = get_uvar("clock_dict", default="None")

    # If the uvar exists
    if all_server_test != "None":
        pass

    # If the uvar does not exist
    else:
        set_uvar("clock_dict", "{}")
        all_server_test = dict()
    
    # Tries to convert the uvar to a dictionary
    try:
        all_server_dict = load_json(all_server_test)

    except:
        return ['Error', 'Problems loading dictionary']

    # Grabs the server id
    server_id = f"{ctx.guild.id}"

    # Checks to see if the server id is in the uvar
    key_result = search_key(server_id, all_server_dict.keys())

    # If the server id exists in the uvar, pulls dictionary of all trackers made within the server.
    if key_result != "None":
        server_dict = all_server_dict[server_id]

    # If the server id does not exist, creates an entry for the server and a dm_time entry
    else:
        all_server_dict[server_id] = {"dm_time": [False, int(round(time(),0)), 0, 0]}
        server_dict = all_server_dict[server_id]

    # Checks to see if the tracker requested exists.
    key_result = search_key(name.lower(), server_dict.keys())
    
    # If it finds at least one key
    if key_result != "None":

        # If it only find one 
        if len(key_result) == 1:
            result_list = server_dict[key_result[0]]
            
            # If the tracker is already active
            if result_list[0]:
                return ['Error', f'You are already clocked in for `{key_result[0]}` tracker']

            # Return the result_list of the tracker
            else:
                return ["Success", result_list, key_result[0]]

        # If it find multiple keys
        else:
            for key in key_result:
                if name.lower() == key.lower():
                    result_list = server_dict[key]

                    # If the tracker is already active
                    if result_list[0]:
                        return ['Error', f'You are already clocked in for `{key}` tracker']

                    # Return the result_list of the tracker
                    else:
                        return ["Success", result_list, key]

                else:
                    pass

            key_result.insert(0, "**Multiple trackers found:**")
            
            return ["Error", "\n".join(key_result)]

    # If it does not find a key
    else:
        return ['Error', "Tracker not found!\nPlease run `!clock create [tracker name]`"]

def set_time_uvar(tracker_list: list, tracker_key: str) -> None:
    """
    Updates time uvar.

    Args:
        tracker_list(list): time uvar contents
        tracker_key (str): Key used for dictionary    
    """

    # Grabs all_server_dict
    all_server_dict = load_json(get_uvar("clock_dict"))

    # Pulls up the dict for the server
    server_dict = all_server_dict[f"{ctx.guild.id}"]

    # Provides an updated tracker list
    new_tracker_list = [True, int(round(time(), 0)), tracker_list[2], tracker_list[3] + 1]
    server_dict[tracker_key] = new_tracker_list

    # Update uvar
    all_server_dict[f"{ctx.guild.id}"] = server_dict
    set_uvar("clock_dict", dump_json(all_server_dict))
    

def calc_time(time:int) -> str:
    """
    Converts seconds into hours, minutes, seconds.
    
    Args:
        time(int): Time in seconds

    Return:
        (str): Result
    """

    # Converts time into hours, minutes, seconds
    hours = time // 3600
    minutes = (time % 3600) // 60
    seconds = (time % 3600) % 60

    return f"{hours} hour(s), {minutes} minute(s), {seconds} second(s)"


def main(input_list: list[str]) -> list[str]:
    """
    Main program function.
    
    Args:
        input_list(list[str]): List of inputs
    
    Output:
        (list[str]): Result
    """

    # If the length of inputs is 0, will automatically choose the dm timer
    if len(input_list) == 0:
        result_list = get_saved_time('dm_time')
        name = "DM Time"

    # Grabs first input.
    else:
        result_list = get_saved_time(input_list[0])
        name = input_list[0]

    # If there was no error
    if result_list[0] != "Error":
        
        # Grabs tracker_details
        tracker_details = result_list[1]
        tracker_key = result_list[2]

        # Updates the time
        set_time_uvar(tracker_details, tracker_key)

        # Tracker details
        result_list = []
        result_list.append(f"**Current total time:** {calc_time(tracker_details[2])}")
        result_list.append(f"**Current clock-ins:** {tracker_details[3] + 1}")
        result_list.append(f"**Time since last clock-out:** {calc_time(int(round(time(),0)) - tracker_details[1])}")

        return [f"{ctx.author.display_name}: {name} tracker has started", "\n".join(result_list)]

    # If there was an error
    else:
        return [f"{ctx.author.display_name} encountered an error", result_list[1]]


# Runs main program
output_list = main(&ARGS&)
left_arrow = "<"


</drac2>
-title "{{output_list[0]}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/clock/image.png"
-f "{{output_list[1]}}"
-footer "!clock in {{left_arrow}}tracker name> | Updated 7/3/23 | ShadowsStride"
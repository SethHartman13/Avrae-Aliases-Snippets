embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|None:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (list[str]|None): If it finds at least one match it returns list of matches, otherwise it returns None
    """

    # Creates list to store matches
    key_results = []

    # Checks each item if a match occurs
    for key in key_list:

        # If matches
        if query.lower() in key.lower():
            key_results.append(key)

        else:
            pass

    # Finds at least 1 match
    if len(key_results) > 0:
        return key_results

    # If it finds no matches
    else:
        return None


def dictionary_change(result_key: str, all_server_dict: dict, server_id: str) -> str, list:

    # Create backup uvar
    set_uvar('clock_dict_backup', dump_json(all_server_dict))
    time_check = all_server_dict[server_id][result_key][:]

    try:
        time_check[4] += time_check[2]

    except:
        time_check.append(time_check[3])

    try:
        time_check[5] += time_check[3]

    except:
        time_check.append(time_check[2])

    # Reset values for the tracker
    all_server_dict[server_id][result_key] = [False, round(time(), 0), 0, 0, time_check[4], time_check[5]]

    set_uvar('clock_dict', dump_json(all_server_dict))

    return result_key, time_check


def reset_time(name: str = "dm_time") -> int|str, list:
    """
    Resets the tracker

    Args:
        name(str): Name of the tracker

    Return:
        list[str]: Result
    """

    # Pulls and checks if uvar exists
    all_server_test = get_uvar("clock_dict")

    # If the uvar exists
    if all_server_test:
        pass

    # If the uvar does not exist
    else:
        return -1, "UVAR not found!"
    
    # Tries to convert the uvar to a dictionary
    try:
        all_server_dict = load_json(all_server_test)

    except:
        return None, 'Problems loading dictionary'

    # Checks to see if the server id is in the uvar
    key_result = search_key(str(ctx.guild.id), all_server_dict.keys())

    # If the server id exists in the uvar, pulls dictionary of all trackers made within the server.
    if key_result:
        pass

    # If the server id does not exist, throws an error
    else:
        return None, "Server dictionary not found"

    # Checks to see if the tracker requested exists.
    key_result = search_key(name, all_server_dict[str(ctx.guild.id)].keys())


    if key_result:
        if len(key_result) == 1:
            return dictionary_change(key_result[0], all_server_dict, str(ctx.guild.id))

        else:
            for key in key_result:
                if name.lower() != key.lower():
                    pass

                else:
                    return dictionary_change(key, all_server_dict, str(ctx.guild.id))


            # If no exact match was made
            key_result.insert(0, "**Multiple trackers found:**")
            
            return None, "\n".join(key_result)

    else:
        return None, "Tracker not found!"


def calc_time(time:int) -> str:
    """
    Converts seconds into hours, minutes, seconds.
    
    Args:
        time(int): Time in seconds

    Return:
        (str): Result
    """

    result_list = []

    # Weeks
    if (weeks := time // 604800) > 0:
        if hours != 1:
            result_list.append(f"{weeks} weeks")
        
        else:
            result_list.append(f"{weeks} week")
    
    else:
        pass

    # Intermediary calc 1
    t1 = time % 604800

    # Days
    if (days := t1 // 86400) > 0:
        if days != 1:
            result_list.append(f"{days} days")
        
        else:
            result_list.append(f"{days} day")
    
    else:
        pass

    # Intermediary calc 2
    t2 = t1 % 86400

    # Hours
    if (hours := t2 // 3600) > 0:
        if hours != 1:
            result_list.append(f"{hours} hours")
        
        else:
            result_list.append(f"{hours} hour")
    
    else:
        pass

    # Intermediary calc 3
    t3 = t2 % 3600

    # Minutes
    if (minutes := t3 // 60) > 0:
        if minutes != 1:
            result_list.append(f"{minutes} minutes")
        
        else:
            result_list.append(f"{minutes} minute")
    
    else:
        pass

    # Seconds
    if (seconds := t3 % 60) > 0:
        if seconds != 1:
            result_list.append(f"{seconds} seconds")
        
        else:
            result_list.append(f"{seconds} second")
    
    else:
        pass

    return ", ".join(result_list)
   

def main(input_list: list[str]) -> list[str]:
    """
    Main program function.
    
    Args:
        input_list(list[str]): List of inputs
    
    Output:
        (list[str]): Result
    """

    # If the length of inputs is 0, will automatically choose the dm timer
    if len(input_list) == 0:
        name, tracker_details = reset_time()

    # Grabs first input
    else:
        name, tracker_details = reset_time(input_list[0])

    # If there was no error
    if name:

        # Tracker details
        result_list = []
        result_list.append(f"**Final time:** {calc_time(tracker_details[2])}")
        result_list.append(f"**Final clock-ins:** {tracker_details[3]}")
        result_list.append(f"**All-time: {calc_time(tracker_details[4])}")
        result_list.append(f"**All-time clock-ins: {calc_time(tracker_details[5])}")

        return f"{ctx.author.display_name}: {name} tracker has been reset", "\n".join(result_list)

    # If there was an error
    else:
        return f"{ctx.author.display_name} has encountered an error", tracker_details


# Runs main program
title, f = main(&ARGS&)
left_arrow = "<"


</drac2>
-title "{{title}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/clock/image.png"
-f "{{f}}"
-footer "!clock reset {{left_arrow}}tracker name> | Updated 10/3/23 | ShadowsStride"
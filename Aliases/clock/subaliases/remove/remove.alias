embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_key(query: str, key_list: list[str]) -> list[str]|str:
    """
    Searches for dictionary key.

    Args:
        query (str): The query being made
        key_list (list): List of keys

    Return:
        (str): If it finds it, it returns the key, otherwise it returns 'None'
    """

    # Creates list to store matches
    results_keys = []

    # For each key in the key_list
    for key in key_list:

        # Sets up process to creater iterations
        initial_iterations = []
        iterations = []
        lst = []
        lst[:] = key.lower()

        for i in range(len(key) + 1):
            initial_iterations.append(lst[:i])


        # So, what happens is it will create iterations like 'r' and 're'
        # This removes the first two so that at least three letters are needed
        initial_iterations.pop(0)
        initial_iterations.pop(0)


        # Puts all the iterations of the key in a list
        for iteration in initial_iterations:
            iterations.append("".join(iteration))

        # If the query returns a match, it will return the key
        if query.lower() in iterations:

            results_keys.append(key)

        else:
            pass

    # If there are matches, return a list
    if len(results_keys) != 0:
        return results_keys

    # If there are no matches, return a string
    else:
        return "None"

def setup_time(name: str) -> list:
    """
    Function to handle the removal of a tracker.
    
    Args:
        name (str): Name of the counter
    
    Return:
        (list[str]): Results
    """

    # Pulls and checks if uvar exists
    all_server_test = get_uvar("clock_dict", default="None")

    # If the uvar exists
    if all_server_test != "None":
        pass

    # If the uvar does not exist
    else:
        return ['Error', "uvar not found!\nPlease run `!clock create [tracker name]`"]
    
    # Tries to convert the uvar to a dictionary
    try:
        all_server_dict = load_json(all_server_test)

    except:
        return ['Error', 'Problems loading dictionary']

    # Grabs the server id
    server_id = f"{ctx.guild.id}"

    # Checks to see if the server id is in the uvar.
    key_result = search_key(server_id, all_server_dict.keys())

    # If the server id exists in the uvar, pulls dictionary of all trackers made within the server.
    if key_result != "None":
        server_dict = all_server_dict[server_id]

    # If the server id does not exist, throws an error
    else:
        return ['Error', "Server dictionary within `clock_dict` \nPlease run `!clock create [tracker name]` or `!clock in`"]

    # Checks to see if the tracker requested exists.
    key_result = search_key(name.lower(), server_dict.keys())

    # If it doesn't find the tracker specified
    if key_result == "None":
        return ['Error', "Tracker not found!\nPlease run `!clock create [tracker name]`"]

    # If it finds only one key
    elif len(key_result) == 1:

        # Create backup uvar
        set_uvar('clock_dict_backup', dump_json(all_server_dict))

        # Dictionary comprehension to remove tracker key
        new_server_dict = {key: val for key, val in server_dict.items() if key.lower() != key_result[0].lower()}
        
        # Updates uvar
        all_server_dict[server_id] = new_server_dict
        set_uvar('clock_dict', dump_json(all_server_dict))

        return ['Success', key_result[0]]
    
    # If it finds more than one exact
    else:
        for dict_key in key_result:

            # If it finds the exact value
            if name.lower() == dict_key.lower():
                
                # Create backup uvar
                set_uvar('clock_dict_backup', dump_json(all_server_dict))

                # Dictionary comprehension to remove tracker key
                new_server_dict = {key: val for key, val in server_dict.items() if dict_key.lower() != key_result[0].lower()}
                
                # Updates uvar
                all_server_dict[server_id] = new_server_dict
                set_uvar('clock_dict', dump_json(all_server_dict))

                return ['Success', key_result[0]]
                
            else:
                pass
        
        key_result.insert(0, "**Multiple trackers found:**")

        return ["Error", "\n".join(key_result)]
   

def main(input_list: list) -> list:
    """
    Main program function.
    
    Args:
        input_list(list[str]): List of inputs
    
    Output:
        (list[str]): Result
    """

    # If the length of inputs is 0, throws error
    if len(input_list) == 0:
        return [f"{ctx.author.display_name} has encountered an error", "No tracker name given!"]

    # Grabs first input
    else:
        result_list = setup_time(input_list[0])
        name = result_list[1]

    # If there was no error
    if result_list[0] != "Error":
        return [f"{ctx.author.display_name}, {name} tracker successfully removed", ""]   

    # If there was an error
    else:
        return [f"{ctx.author.display_name} encountered an error", result_list[1]]


# Runs main program
output_list = main(&ARGS&)


</drac2>
-title "{{output_list[0]}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/clock/image.png"
-f "{{output_list[1]}}"
-footer "!clock remove [tracker name] | Updated 7/3/23 | ShadowsStride"
embed
<drac2>
# *******************************************************
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International 
# * License available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def delete_from_dict(key_result: str, all_server_dict: dict, server_id: str) -> None:
    """
    Deletes entry from dict

    Args:
        key_result (str): Tracker name
        all_server_dict (dict): Dictionary containing all trackers
        server_id (str): Server ID    
    """

    # Turns off tracker and sets time to when it got turned off
    all_server_dict[server_id][key_result][0] = False
    all_server_dict[server_id][key_result][1] = int(time())

    # Setup backup_dict
    set_uvar('clock_dict_backup', dump_json(all_server_dict))

    # Pop tracker
    all_server_dict[server_id].pop(key_result)

    # Setup main dict
    set_uvar('clock_dict', dump_json(all_server_dict))


def setup_time(name: str) -> list:
    """
    Function to handle the removal of a tracker.
    
    Args:
        name (str): Name of the counter
    
    Return:
        (list[str]): Results
    """

    # If the UVAR exists
    if (all_server_test := get_uvar('clock_dict')):
        pass

    # If the UVAR does not exist
    else:
        return -1, "UVAR not found!\nPlease run `!clock create [tracker name]` or `!clock in`"
    
    # Tries to convert the uvar to a dictionary
    try:
        all_server_dict = load_json(all_server_test)

    except:
        return -1, 'Problems loading dictionary'

    # If the server id exists in the uvar, pulls dictionary of all trackers made within the server.
    if (key_result := search_list(str(ctx.guild.id), all_server_dict.keys())):
        pass

    # If the server id does not exist, throws an error
    else:
        return -1, "You need to create a tracker on this server before you can remove one"

    # If it finds a tracker
    if (key_result := search_list(name.lower(), all_server_dict[str(ctx.guild.id)].keys())):

        # If it only has exactly 1 match, delete tracker
        if len(key_result) == 1:
            delete_from_dict(key_result[0], all_server_dict, str(ctx.guild.id))
            return key_result[0], ""

        # If multiple matches
        else:

            # For each match, if it is not an exact match
            for key in key_result:
                if name.lower() != dict_key.lower():
                    pass

                # If it finds an exact match, delete tracker
                else:
                    delete_from_dict(key, all_server_dict, str(ctx.guild.id))
                    return key, ""

            # If no exact match was made
            key_result.insert(0, "**Multiple trackers found:**")
            
            return -1, "\n".join(key_result)

    # No matches
    else:
        return -1, "Tracker not found!"
   

def main(input_list: list[str]) -> str:
    """
    Main program function.
    
    Args:
        input_list (list[str]): List of inputs
    
    Output:
        str: Result
    """

    # If the length of inputs is 0, throws error
    if len(input_list) == 0:
        return f"{ctx.author.display_name} has encountered an error", "No tracker name given!"

    # Grabs first input
    else:
        name, f = setup_time(input_list[0])

    # If there was no error
    if name != -1:
        return f"{ctx.author.display_name}, `{name}` tracker successfully removed", ""

    # If there was an error
    else:
        return f"{ctx.author.display_name} has encountered an error", f


# Runs main program
title, f = main(&ARGS&)


</drac2>
-title "{{title}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Avrae-Aliases-Snippets/master/Aliases/clock/image.png"
-f "{{f}}"
-footer "!clock remove [tracker name] | Updated 10/26/23 | ShadowsStride"